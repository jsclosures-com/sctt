{"testname":"siemens2","comments":"siemens","testsample":"siemens","testnotes":"YmFzZQ==","testdetailscript":"ZnVuY3Rpb24oY29tbWFuZExpbmUsY2FsbGJhY2spewoKdmFyIHNvbHJIb3N0ID0gIjEyNy4wLjAuMSI7CiAgICAgICAgdmFyIHNvbHJQb3J0ID0gODk4MzsKICAgICAgICB2YXIgc29sclBhdGggPSAiL3NvbHIvdmFsaWRhdGUvc2VsZWN0P3E9KjoqIjsKICAgICAgICAKICAgICAgICBsZXQgdGVzdE5hbWUgPSAiZGVmYXVsdCI7IAoKICAgICAgICBpZiggY29tbWFuZExpbmUudGVzdG5hbWUgKQogICAgICAgICAgICB0ZXN0TmFtZSA9IGFyZ3MucXVlcnlPYmoudGVzdG5hbWU7CiAgICAgICAgCiAgICAgICAgaWYoIHRlc3ROYW1lICl7CiAgICAgICAgICAgIHNvbHJQYXRoICs9ICImZnE9dGVzdG5hbWU6IiArIHRlc3ROYW1lOwogICAgICAgIH0KICAgICAgICB2YXIgZmluYWxSZXN1bHQgPSB7aXRlbXM6IFtdfTsKCiAgICAgICAgdmFyIGNvbGxlY3RvckNCID0gZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgICAgIGlmKCBkYXRhLml0ZW1zICl7CiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5pdGVtcyA9IHRoaXMucmVzdWx0Lml0ZW1zLmNvbmNhdChkYXRhLml0ZW1zKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJjb25jYXQgaXRlbXMiLHRoaXMucmVzdWx0LHRoaXMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiggdGhpcy5uZXh0RW50cnkgKQogICAgICAgICAgICAgICAgZ2V0UkVTVERhdGEoe2hvc3Q6IHNvbHJIb3N0LHBvcnQ6IHNvbHJQb3J0LHBhdGg6IHRoaXMubmV4dEVudHJ5LnBhdGgsdHlwZTogdGhpcy5uZXh0RW50cnkudHlwZSxjYWxsYmFjazogdGhpcy5uZXh0RW50cnkuY2FsbGJhY2ssZW50cnk6IHRoaXMubmV4dEVudHJ5fSk7CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5yZXN1bHQpOwogICAgICAgIH0KICAgICAgICB2YXIgcGF0aExpc3QgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAicXVlcnkiLGxhYmVsOiAiU3VtbWFyeU1heFFUaW1lcyIsZmllbGQ6ICJxdGltZSIscGF0aDogc29sclBhdGggKyAiJmZxPWNvbnRlbnR0eXBlOlNVTU1BUlkmcm93cz0xJnNvcnQ9cXRpbWUrZGVzYyJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogInF1ZXJ5IixsYWJlbDogIlN1bW1hcnlNYXhSb3dDb3VudCIsZmllbGQ6ICJyb3djb3VudCIscGF0aDogc29sclBhdGggKyAiJmZxPWNvbnRlbnR0eXBlOlNVTU1BUlkmcm93cz0xJnNvcnQ9cm93Y291bnQrZGVzYyJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogInF1ZXJ5IixsYWJlbDogIlN1bW1hcnlNaW5RVGltZSIsZmllbGQ6ICJxdGltZSIscGF0aDogc29sclBhdGggKyAiJmZxPWNvbnRlbnR0eXBlOlNVTU1BUlkmcm93cz0xJnNvcnQ9cXRpbWUrYXNjIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAicXVlcnkiLGxhYmVsOiAiU3VtbWFyeU1pblJvd0NvdW50IixmaWVsZDogInJvd2NvdW50IixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6U1VNTUFSWSZyb3dzPTEmc29ydD1yb3djb3VudCthc2MifSwKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAicXVlcnkiLGxhYmVsOiAiQmVmb3JlTWF4UVRpbWUiLGZpZWxkOiAicXRpbWUiLHBhdGg6IHNvbHJQYXRoICsgIiZmcT1jb250ZW50dHlwZTpCRUZPUkUmcm93cz0xJnNvcnQ9cXRpbWUrZGVzYyJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogInF1ZXJ5IixsYWJlbDogIkJlZm9yZU1heFJvd0NvdW50IixmaWVsZDogInJvd2NvdW50IixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6QkVGT1JFJnJvd3M9MSZzb3J0PXJvd2NvdW50K2Rlc2MifSwKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICJxdWVyeSIsbGFiZWw6ICJBZnRlck1heFFUaW1lIixmaWVsZDogInF0aW1lIixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6QUZURVImcm93cz0xJnNvcnQ9cXRpbWUrZGVzYyJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogInF1ZXJ5IixsYWJlbDogIkFmdGVyTWF4Um93Q291bnQiLGZpZWxkOiAicm93Y291bnQiLHBhdGg6IHNvbHJQYXRoICsgIiZmcT1jb250ZW50dHlwZTpBRlRFUiZyb3dzPTEmc29ydD1yb3djb3VudCtkZXNjIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICJxdWVyeSIsbGFiZWw6ICJCZWZvcmVNaW5RVGltZSIsZmllbGQ6ICJxdGltZSIscGF0aDogc29sclBhdGggKyAiJmZxPWNvbnRlbnR0eXBlOkJFRk9SRSZyb3dzPTEmc29ydD1xdGltZSthc2MifSwKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICJxdWVyeSIsbGFiZWw6ICJCZWZvcmVNaW5Sb3dDb3VudCIsZmllbGQ6ICJyb3djb3VudCIscGF0aDogc29sclBhdGggKyAiJmZxPWNvbnRlbnR0eXBlOkJFRk9SRSZyb3dzPTEmc29ydD1yb3djb3VudCthc2MifSwKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICJxdWVyeSIsbGFiZWw6ICJBZnRlck1pblFUaW1lIixmaWVsZDogInF0aW1lIixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6QUZURVImcm93cz0xJnNvcnQ9cXRpbWUrYXNjIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAicXVlcnkiLGxhYmVsOiAiQWZ0ZXJNaW5Sb3dDb3VudCIsZmllbGQ6ICJyb3djb3VudCIscGF0aDogc29sclBhdGggKyAiJmZxPWNvbnRlbnR0eXBlOkFGVEVSJnJvd3M9MSZzb3J0PXJvd2NvdW50K2FzYyJ9LAogICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogImZhY2V0IixwYXRoOiBzb2xyUGF0aCArICImZmFjZXQuZmllbGQ9Y29udGVudHR5cGUmZmFjZXQ9b24mZmFjZXQubWluY291bnQ9MSZyb3dzPTAifQogICAgICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgIGZvcihsZXQgaSA9IDA7aSA8IHBhdGhMaXN0Lmxlbmd0aDtpKyspewogICAgICAgICAgICBpZiggaSsxIDwgcGF0aExpc3QubGVuZ3RoICkKICAgICAgICAgICAgICAgIHBhdGhMaXN0W2ldLmNhbGxiYWNrID0gY29sbGVjdG9yQ0IuYmluZCh7YXJnczogY29tbWFuZExpbmUscmVzdWx0OiBmaW5hbFJlc3VsdCxuZXh0RW50cnk6IHBhdGhMaXN0W2krMV0sY2FsbGJhY2s6IGNhbGxiYWNrIH0pOwogICAgICAgICAgICBlbHNlICAgIAogICAgICAgICAgICAgICAgcGF0aExpc3RbaV0uY2FsbGJhY2sgPSBjb2xsZWN0b3JDQi5iaW5kKHthcmdzOiBjb21tYW5kTGluZSxyZXN1bHQ6IGZpbmFsUmVzdWx0LGNhbGxiYWNrOiBjYWxsYmFjayB9KTsKICAgICAgICB9CgogICAgICAgIGNvbnNvbGUubG9nKCJzb2xycGF0aCIscGF0aExpc3RbMF0ucGF0aCk7CiAgICAgICAgZ2V0UkVTVERhdGEoe2hvc3Q6IHNvbHJIb3N0LHBvcnQ6IHNvbHJQb3J0LHBhdGg6IHBhdGhMaXN0WzBdLnBhdGgsdHlwZTogcGF0aExpc3RbMF0udHlwZSxjYWxsYmFjazogcGF0aExpc3RbMF0uY2FsbGJhY2ssZW50cnk6IHBhdGhMaXN0WzBdfSk7CgoKfQ==","testharvestscript":"ZnVuY3Rpb24oY29tbWFuZExpbmUpewpsZXQgY29uZmlnID0gewoJCQkgIGhvc3Q6ICdzb2xyc2VydmVyJywKCQkJICBwb3J0OiAyMiwKCQkJICB1c2VybmFtZTogY29tbWFuZExpbmUudXNlcm5hbWUsCgkJCSAgcGFzc3dvcmQ6IGNvbW1hbmRMaW5lLnBhc3N3b3JkCgkJCX07CgpmdW5jdGlvbiByZWRhY3Qob2JqLGZpZWxkTmFtZSl7CiAgbGV0IHJlc3VsdCA9ICcnOwoKZm9yKGxldCBwIGluIG9iail7CiAgIGlmKCBwICE9IGZpZWxkTmFtZSApewogICAgICAgIHJlc3VsdCArPSAiICIgKyBwICsgIjoiICsgb2JqW3BdOwogICB9Cn0KCgpyZXR1cm4oIHJlc3VsdCApOwp9CgpmdW5jdGlvbiB3cml0ZUxvZ0xpbmUob3V0U3RyZWFtLGxvZyl7CglvdXRTdHJlYW0ud3JpdGUobG9nICsgIlxuIik7Cn0KCmxldCBzaHV0RG93biA9IGZhbHNlOwpsZXQgc2h1dERvd25Db3VudGVyID0gMDsKZnVuY3Rpb24gY2hlY2tTaXplKGNsaWVudCxjYil7CglsZXQgc3RhdHMgPSBmcy5zdGF0U3luYyhjb21tYW5kTGluZS5vdXRGaWxlTmFtZSk7Cgljb25zb2xlLmxvZyhzdGF0cy5zaXplKTsKCXNodXREb3duQ291bnRlcisrOwoJaWYoIHN0YXRzLnNpemUgPj0gY29tbWFuZExpbmUubWF4U2l6ZSAgfHwgc2h1dERvd25Db3VudGVyID4gMjAwICl7CgkJaWYoIGNsaWVudCAmJiAhc2h1dERvd24pewoJCQlzaHV0RG93biA9IHRydWU7CgkJCWNiKCk7CgkJfQoJfQoJZWxzZSB7CgkJc2V0VGltZW91dChjaGVja1NpemUsNTAwMCxjbGllbnQsY2IpOwoJfQp9CgoKZnVuY3Rpb24gY29weUZpbGVGaXJzdChjb25maWcsY2FsbGJhY2spewogICAgbGV0IGZpbGVOYW1lSW4gPSAnL3dheWZhaXIvZGF0YS9zb2xyL3Zhci9sb2dzL3NvbHIubG9nJzsKICAgIGxldCBmaWxlTmFtZU91dCA9ICcvdG1wL3NvbHIubG9nJzsKICAgIGNvbnNvbGUubG9nKHJlZGFjdChjb25maWcsInBhc3N3b3JkIikpOwoJdmFyIGNvbm4gPSBuZXcgU1NIQ2xpZW50KCk7Cgljb25uLm9uKCdyZWFkeScsIGZ1bmN0aW9uKCkgewoJICAgIGNvbnNvbGUubG9nKCdDbGllbnQgOjogcmVhZHknKTsKCSAgICBjb25uLmV4ZWMoJ3N1ZG8gY2F0ICcgKyBmaWxlTmFtZUluICsgJyA+ICcgKyBmaWxlTmFtZU91dCwgeyBwdHk6IHRydWUgfSwgZnVuY3Rpb24oZXJyLCBzdHJlYW0pIHsKCSAgICAgICAgaWYgKGVycikgdGhyb3cgZXJyOwoJICAgICAgICBzdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24oY29kZSwgc2lnbmFsKSB7CgkgICAgICAgICAgICBjb25zb2xlLmxvZygnU3RyZWFtIDo6IGNsb3NlIDo6IGNvZGU6ICcgKyBjb2RlICsgJywgc2lnbmFsOiAnICsgc2lnbmFsKTsKCSAgICAgICAgICAgIGNvbm4uZW5kKCk7CgkgICAgICAgICAgICBjYWxsYmFjayh7c3RhdHVzOiAxfSk7CgkgICAgICAgIH0pLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkgewoJICAgICAgICAgICAgaWYgKGRhdGEuaW5kZXhPZignOicpID49IGRhdGEubGVuZ3RoIC0gMikgewoJICAgICAgICAgICAgc3RyZWFtLndyaXRlKGNvbmZpZy5wYXNzd29yZCArICdcbicpOwpjb25zb2xlLmxvZygic2V0dGluZyBwYXNzd29yZCIpOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgZWxzZSB7CgkgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NURE9VVDogJyArIGRhdGEpOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgY2FsbGJhY2soe3N0YXR1czogMX0pOwoJICAgICAgICB9KS5zdGRlcnIub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7CgkgICAgICAgICAgICBjb25zb2xlLmxvZygnU1RERVJSOiAnICsgZGF0YSk7CgkgICAgICAgIH0pOwoJICAgIH0pOwoJfSkuY29ubmVjdChjb25maWcpOwp9CgpmdW5jdGlvbiBnZXRDb3JlTG9nQ2FsbGJhY2socmVzKSB7CglsZXQgc3RyID0gIiI7CiAgICBsZXQgb3V0RmlsZU5hbWUgPSB0aGlzLm91dEZpbGVOYW1lOwogICAgbGV0IG91dFN0cmVhbSA9IHRoaXMub3V0U3RyZWFtOwoJbGV0IGNhbGxiYWNrID0gdGhpcy5jYWxsYmFjazsKCWxldCBjb3JlTGlzdCA9IHRoaXMuY29yZUxpc3Q7CglsZXQgaW5kZXggPSB0aGlzLmluZGV4OwogICAgbGV0IGNsaWVudCA9IHRoaXMuY2xpZW50OwogICAgbGV0IGRldGFpbHMgPSB0aGlzLmRldGFpbHM7CgogICAgY29uc29sZS5sb2coImdldCIpOwogICAgbGV0IHJlbW90ZVBhdGggPSAnL3RtcC9zb2xyLmxvZyc7CgoJCQlsZXQgb3B0aW9ucyA9IHsKCQkJICBjb25jdXJyZW5jeTogNjQsIAoJCQkgIGF1dG9DbG9zZTogZmFsc2UsCgkJCSAgY2h1bmtTaXplOiAzMjc2OCwgCgkJCSAgc3RlcDogZnVuY3Rpb24odG90YWxfdHJhbnNmZXJyZWQsIGNodW5rLCB0b3RhbCkgewoJCQkgICAgY29uc29sZS5sb2codG90YWxfdHJhbnNmZXJyZWQsdG90YWwpOwoJCQkgIH0KCQkJfTsKICAgIGxldCBjYiA9IGZ1bmN0aW9uKCl7CiAgICAJdGhpcy5jbGllbnQuZW5kKCk7CiAgICAgICAgY29uc29sZS5sb2coImVuZCIpOwogICAgICAgIHRoaXMub3V0U3RyZWFtLmNsb3NlKCk7CiAgICAgICBjb25zb2xlLmxvZygiQ09SRUxPR1MiKTsKICAgICAgbGV0IGRvbmUgPSB0cnVlOwogICAgICB0aGlzLmNvcmVMaXN0W3RoaXMuaW5kZXhdLmRhdGEgPSB0cnVlOwogICAgICBsZXQgbmV4dEluZGV4ID0gLTE7CgkJICBmb3IobGV0IGkgaW4gdGhpcy5jb3JlTGlzdCl7CgkJCSAgaWYoICF0aGlzLmNvcmVMaXN0W2ldLmRhdGEgKXsKCQkJCSAgZG9uZSA9IGZhbHNlOwoJCQkJICBuZXh0SW5kZXggPSBpOwoJCQkJICBicmVhazsKCQkJICB9CgkJICB9CgoJCSAgaWYoIGRvbmUgKXsKCQkJbGV0IG1lc3NhZ2VzID0gW3ttZXNzYWdlOiAiRE9ORSJ9XTsKCQkJCgkJCWNhbGxiYWNrKG1lc3NhZ2VzKTsKCQkgfQoJCSBlbHNlIHsKCQkgCWdldENvcmVMb2coY29uZmlnLGNvcmVMaXN0LGRldGFpbHMsY2FsbGJhY2ssbmV4dEluZGV4KTsKCQkgfQogICAgfS5iaW5kKHtjbGllbnQ6IGNsaWVudCxjb3JlTGlzdDogY29yZUxpc3QsaW5kZXg6IGluZGV4LG91dFN0cmVhbTogb3V0U3RyZWFtfSk7CiAKIAlsZXQgY2IyID0gZnVuY3Rpb24oKXsKCSAgICAvL2NvbnNvbGUuZXJyb3IoIkVSUk9SIixlcnIubWVzc2FnZSk7CgkgICAgdGhpcy5jYigpOwoJICB9LmJpbmQoe2NiOiBjYn0pOwogICAgIGNvbnNvbGUubG9nKCJjb25uZWN0IixyZW1vdGVQYXRoLG9wdGlvbnMpOwogICAgY2xpZW50LmdldChyZW1vdGVQYXRoLCBvdXRTdHJlYW0sb3B0aW9ucykudGhlbihjYikKCSAgLmNhdGNoKGNiMik7CgogICAgY2hlY2tTaXplKGNsaWVudCxjYik7CgoKCQkgIAogIH0KCiAgZnVuY3Rpb24gc2hhbGxvd0Nsb25lKGFyZ3MpewogIAlsZXQgcmVzdWx0ID0ge307CgogIAlpZiggYXJncyl7CgkgIAlmb3IobGV0IHAgaW4gYXJncyl7CgkgIAkJaWYoIGFyZ3MuaGFzT3duUHJvcGVydHkocCkgKSAKCSAgCQkJcmVzdWx0W3BdID0gYXJnc1twXTsKCSAgCX0KCX0KCiAgCS8vYWNvbnNvbGUubG9nKCJjbG9uZSIsYXJncyxyZXN1bHQpOwogIAlyZXR1cm4oIHJlc3VsdCApOwogIH0KCmZ1bmN0aW9uIGdldENvcmVMb2coY29uZmlnLGNvcmVMaXN0LGRldGFpbHMsY2FsbGJhY2ssc3RhcnRJbmRleCl7CgkKCWxldCBnZXRMb2dGaWxlID0gZnVuY3Rpb24oaSl7CgkJbGV0IHN0YXJ0VG9rZW4gPSAiaHR0cDovLyI7CgkJbGV0IGVuZFRva2VuID0gIi9zb2xyIjsKCQlsZXQgY29yZUxpc3QgPSB0aGlzLmNvcmVMaXN0OwoJCWxldCBjb25maWcgPSB0aGlzLmNvbmZpZzsKCQlsZXQgZGV0YWlscyA9IHRoaXMuZGV0YWlsczsKCQlsZXQgY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrOwoKCQkvL2xldCBtZXNzYWdlcyA9IFtdOwoJCWlmKCBpIDwgY29yZUxpc3QubGVuZ3RoICl7CgkJCWxldCB0Q29yZSA9IGNvcmVMaXN0W2ldLnVybDsKCSAgICAgICAgbGV0IHRQYXRoID0gY29yZUxpc3RbaV0ucGF0aDsKCgkJCWxldCBpZHggPSB0Q29yZS5pbmRleE9mKHN0YXJ0VG9rZW4pOwoJCQlsZXQgc2lkeCA9IHRDb3JlLmluZGV4T2YoZW5kVG9rZW4pOwoJCQlpZiggaWR4ID4gLTEgJiYgc2lkeCA+IC0xICl7CgkJCQlsZXQgc291cmNlU29sckhvc3QgPSB0Q29yZS5zdWJzdHJpbmcoaWR4ICsgc3RhcnRUb2tlbi5sZW5ndGgsc2lkeCk7CgkJCQlsZXQgc291cmNlU29sclBvcnQgPSA4MDsKCQkJCWxldCBwaWR4ID0gc291cmNlU29sckhvc3QuaW5kZXhPZigiOiIpOwoJCQkJaWYoIHBpZHggPiAtMSApewoJCQkJCXNvdXJjZVNvbHJQb3J0ID0gc291cmNlU29sckhvc3Quc3Vic3RyaW5nKHBpZHgrMSk7CgkJCQkJc291cmNlU29sckhvc3QgPSBzb3VyY2VTb2xySG9zdC5zdWJzdHJpbmcoMCxwaWR4KTsKCQkJCX0KCQkJCWxldCB0Q29uZmlnID0gc2hhbGxvd0Nsb25lKGNvbmZpZyk7CgkJICAgICAgICB0Q29uZmlnLmhvc3QgPSBzb3VyY2VTb2xySG9zdDsKCQkgICAgICAgICAgIAoKCSAgICAgICAgICAgIC8vbGV0IHQgPSBodHRwLmdldCh7aG9zdDogc291cmNlU29sckhvc3QscG9ydDogc291cmNlU29sclBvcnQscGF0aDogdFBhdGh9LCB0Q2FsbGJhY2spOwoJICAgICAgICAgICAgbGV0IHNjYiA9IGZ1bmN0aW9uKCl7CgkgICAgICAgICAgICAJbGV0IHNmdENsaWVudCA9IG5ldyBTU0gyQ2xpZW50KCk7CgkJICAgICAgICAgICAgbGV0IHRDYWxsYmFjayA9IGdldENvcmVMb2dDYWxsYmFjay5iaW5kKHtzb3VyY2VTb2xySG9zdDogdGhpcy5zb3VyY2VTb2xySG9zdCxjbGllbnQ6IHNmdENsaWVudCxvdXRTdHJlYW06IHRoaXMub3V0U3RyZWFtLG91dEZpbGVOYW1lOnRoaXMub3V0RmlsZU5hbWUsZGV0YWlsczogdGhpcy5kZXRhaWxzLGluZGV4OiB0aGlzLmluZGV4LGNvcmVMaXN0OiB0aGlzLmNvcmVMaXN0LGNhbGxiYWNrOiB0aGlzLmNhbGxiYWNrfSk7CgkJICAgICAgICAgICAgCgkJICAgICAgICAgICAgc2Z0Q2xpZW50LmNvbm5lY3QodGhpcy5jb25maWcpLnRoZW4odENhbGxiYWNrKTsKCSAgICAgICAgICAgIH0uYmluZCh7c291cmNlU29sckhvc3Q6IHNvdXJjZVNvbHJIb3N0LG91dFN0cmVhbTogZGV0YWlscy5vdXRTdHJlYW0sb3V0RmlsZU5hbWU6ZGV0YWlscy5vdXRGaWxlTmFtZSxkZXRhaWxzOiBkZXRhaWxzLGluZGV4OiBpLGNvcmVMaXN0OiBjb3JlTGlzdCxjYWxsYmFjazogY2FsbGJhY2ssY29uZmlnOiB0Q29uZmlnfSk7CgkgICAgICAgICAgICAKCSAgICAgICAgICAgIGNvcHlGaWxlRmlyc3QodENvbmZpZyxzY2IpOwoJICAgICAgICB9CgkJfQoJfS5iaW5kKHtjb3JlTGlzdDogY29yZUxpc3QsY29uZmlnOiBjb25maWcsZGV0YWlsczogZGV0YWlscyxjYWxsYmFjazogY2FsbGJhY2t9KTsKCgoJaWYoIGNvcmVMaXN0Lmxlbmd0aCA9PSAwICkKCQljYWxsYmFjayhbe21lc3NhZ2U6ICJOT0NPUkUifV0pOwoJZWxzZQoJCWdldExvZ0ZpbGUoc3RhcnRJbmRleCk7Cn0KCgpmdW5jdGlvbiBnZXRMb2dzQ2FsbGJhY2socmVzKSB7CiAgbGV0IHN0ciA9ICIiOwogIGxldCBzb3VyY2VTb2xySG9zdCA9IHRoaXMuc291cmNlU29sckhvc3Q7CiAgbGV0IHNvdXJjZVNvbHJQb3J0ID0gdGhpcy5zb3VyY2VTb2xyUG9ydDsKICBsZXQgc291cmNlU29sckNvbGxlY3Rpb24gPSB0aGlzLnNvdXJjZVNvbHJDb2xsZWN0aW9uOwogIGxldCBvdXRGaWxlTmFtZSA9IHRoaXMub3V0RmlsZU5hbWU7CiAgbGV0IG91dFN0cmVhbSA9IHRoaXMub3V0U3RyZWFtOwogIGxldCBjYWxsYmFjayA9IHRoaXMuY2FsbGJhY2s7CiAgCiAgcmVzLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7CiAgICAgICAgICAgICAgc3RyICs9IGNodW5rOwogICAgICAgICAgICAgIAogICAgICAgIH0pOwoKICByZXMub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zb2xlLmxvZygiQ0xVU1RFUlNUQVRVUyIsc291cmNlU29sckhvc3Qsc291cmNlU29sclBvcnQsc291cmNlU29sckNvbGxlY3Rpb24pOwoJCWxldCBjbHVzdGVyU3RhdHVzID0gSlNPTi5wYXJzZShzdHIpOwoJCQoJCWlmKCBjbHVzdGVyU3RhdHVzLmNsdXN0ZXIgICYmIGNsdXN0ZXJTdGF0dXMuY2x1c3Rlci5jb2xsZWN0aW9ucyAmJiBjbHVzdGVyU3RhdHVzLmNsdXN0ZXIuY29sbGVjdGlvbnNbc291cmNlU29sckNvbGxlY3Rpb25dICl7CgkJCWxldCBjb2xsZWN0aW9uSW5mbyA9IGNsdXN0ZXJTdGF0dXMuY2x1c3Rlci5jb2xsZWN0aW9uc1tzb3VyY2VTb2xyQ29sbGVjdGlvbl07CgoJCQlpZiggY29sbGVjdGlvbkluZm8uc2hhcmRzICl7CgkJCQlsZXQgY29yZUxpc3QgPSBbXTsKCQkJCWZvcihsZXQgcyBpbiBjb2xsZWN0aW9uSW5mby5zaGFyZHMpewoJCQkJCWxldCBzaGFyZCA9IGNvbGxlY3Rpb25JbmZvLnNoYXJkc1tzXTsKCQkJCQlmb3IobGV0IHIgaW4gc2hhcmQucmVwbGljYXMpewogICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVwbGljYSA9IHNoYXJkLnJlcGxpY2FzW3JdOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicmVwbGljYSIscmVkYWN0KHJlcGxpY2EsInBhc3N3b3JkIikpOwoJCQkJCQlpZiggcmVwbGljYS5zdGF0ZSA9PSAnYWN0aXZlJyApewoJCQkJCQkJY29yZUxpc3QucHVzaCh7dXJsOiByZXBsaWNhLmJhc2VfdXJsLHBhdGg6Ii9zb2xyL2FkbWluL2luZm8vbG9nZ2luZz9fPTE1NzQyMDA0MzE2NzEmc2luY2U9MCZ3dD1qc29uIn0pOwoJCQkJCQkJLy9icmVhazsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJCWdldENvcmVMb2coY29uZmlnLGNvcmVMaXN0LHtvdXRGaWxlTmFtZTogb3V0RmlsZU5hbWUsb3V0U3RyZWFtOiBvdXRTdHJlYW19LGNhbGxiYWNrLDApOwoJCQl9CgkJCWVsc2UgewoJCQkJY2FsbGJhY2soe2NvbGxlY3Rpb246IHNvdXJjZVNvbHJDb2xsZWN0aW9uLG1lc3NhZ2VzOiBbe21lc3NhZ2U6ICJOTyBTSEFSRFMifV19KTsKCQkJfQoJCX0KCQllbHNlIHsKCQkJY29uc29sZS5sb2coIk5PIERFU1RJTkFUSU9OIixzb3VyY2VTb2xyQ29sbGVjdGlvbik7CgkJCWNhbGxiYWNrKHtjb2xsZWN0aW9uOiBzb3VyY2VTb2xyQ29sbGVjdGlvbixtZXNzYWdlczogW3ttZXNzYWdlOiAiTk8gREVTVElOQVRJT04ifV19KTsKCQl9CiAgfSk7Cn0KCmZ1bmN0aW9uIGdldENvcmVTdGF0cyhhcmdzLGNhbGxiYWNrKXsKCWxldCBzb3VyY2VTb2xySG9zdCA9IGFyZ3MuaGFzT3duUHJvcGVydHkoJ3NvdXJjZVNvbHJIb3N0JykgPyBhcmdzWydzb3VyY2VTb2xySG9zdCddIDogImMzLnNvbHJjbG91ZC5zZXJ2aWNlLmludHJhYm8xLmNvbnN1bC5jc256b28uY29tIjsKCWxldCBzb3VyY2VTb2xyUG9ydCA9IGFyZ3MuaGFzT3duUHJvcGVydHkoJ3NvdXJjZVNvbHJQb3J0JykgPyBhcmdzWydzb3VyY2VTb2xyUG9ydCddIDogODE4MDsKCWxldCBzb3VyY2VTb2xyQ29sbGVjdGlvbiA9IGFyZ3MuaGFzT3duUHJvcGVydHkoJ3NvdXJjZVNvbHJDb2xsZWN0aW9uJykgPyBhcmdzWydzb3VyY2VTb2xyQ29sbGVjdGlvbiddIDogJ2Rlbm9ybV91cyc7CiAgICBsZXQgb3V0RmlsZU5hbWUgPSBhcmdzLmhhc093blByb3BlcnR5KCdvdXRGaWxlTmFtZScpID8gYXJnc1snb3V0RmlsZU5hbWUnXSA6ICcvd2F5ZmFpci9kYXRhL2Rlbm9ybV9zb2xyLmxvZyc7CiAgICB2YXIgb3V0U3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ob3V0RmlsZU5hbWUpOwogICAgICAgIGNvbW1hbmRMaW5lLm91dEZpbGVOYW1lID0gb3V0RmlsZU5hbWU7CglvdXRTdHJlYW0ud3JpdGFibGUgPSB0cnVlOwogICAgbGV0IG1heFNpemUgPSBhcmdzLmhhc093blByb3BlcnR5KCdtYXhTaXplJykgPyBhcmdzWydtYXhTaXplJ10gOiAxMCoxMDAwMDAwOwogICAgICAgY29tbWFuZExpbmUubWF4U2l6ZSA9IG1heFNpemU7CglsZXQgdENhbGxiYWNrID0gZ2V0TG9nc0NhbGxiYWNrLmJpbmQoe3NvdXJjZVNvbHJIb3N0OiBzb3VyY2VTb2xySG9zdCxzb3VyY2VTb2xyUG9ydDogc291cmNlU29sclBvcnQsc291cmNlU29sckNvbGxlY3Rpb246IHNvdXJjZVNvbHJDb2xsZWN0aW9uLG91dEZpbGVOYW1lOiBvdXRGaWxlTmFtZSxvdXRTdHJlYW06IG91dFN0cmVhbSxjYWxsYmFjazogY2FsbGJhY2t9KTsKCWxldCB0ID0gaHR0cC5nZXQoe2hvc3Q6IHNvdXJjZVNvbHJIb3N0LHBvcnQ6IHNvdXJjZVNvbHJQb3J0LHBhdGg6ICIvc29sci9hZG1pbi9jb2xsZWN0aW9ucz9hY3Rpb249Q0xVU1RFUlNUQVRVUyZ3dD1qc29uIn0sIHRDYWxsYmFjayx0Q2FsbGJhY2spOwp9CgpmdW5jdGlvbiBjYihtZXNzYWdlcyl7Cgljb25zb2xlLmxvZygiY29tcGxldGUiLG1lc3NhZ2VzKTsKfQpnZXRDb3JlU3RhdHMoY29tbWFuZExpbmUsY2IpOwoKCn0=","testharvestscript_s":"username=search password= maxSize=10000000 sourceSolrHost=server1 sourceSolrCollection=collection1 outFileName=/tmp/out_solr.log","testcopyscript_s":"testName=siemens sourceSolrIdField=id sourceSolrHostA=server1 sourceSolrCollectionA=collection1 destinationSolrHostA=server2 destinationSolrCollectionA=collection2 sourceSolrHostB=server1 sourceSolrCollectionB=collection1 destinationSolrHostB=server2 destinationSolrCollectionB=collection2","testbuildscript":"","testbuildscript_s":"inFileName=/tmp/out_solr.log testName=siemens useAsSeed=true csvData= requiredTag=collection1","testextractscript":"","testextractscript_s":"testName=siemens sourceSolrCollectionB=Atlas sourceSolrCollectionA=D3LiveQueryPipeline","testinterpretscript":"ZnVuY3Rpb24oY29tbWFuZExpbmUpewogIGNvbnNvbGUubG9nKCJjb21tYW5kIixjb21tYW5kTGluZSk7CnZhciBwcm9maWxlTWFuYWdlciA9IGdldEN1cnJlbnRDb250ZXh0KCkuVUlQcm9maWxlTWFuYWdlcjsKICAgICAgICAgICAgCgkJCQlsZXQgc2VhcmNoQm94ID0gdGhpcy5zZWFyY2hCb3g7CgkJCQlsZXQgbWVzc2FnZUJveCA9IHRoaXMubWVzc2FnZUJveDsKCQkJCWxldCByZXN1bHRQYW5lbEEgPSB0aGlzLnJlc3VsdFBhbmVsQTsKCQkJCWxldCByZXN1bHRQYW5lbEIgPSB0aGlzLnJlc3VsdFBhbmVsQjsKCQkJCWxldCB0ZXN0ID0gdGhpcy50ZXN0OwoJCQkJCgkJCQlsZXQgYWxsRGF0YSA9IHt9OwoJCQkJCgkJCQlmdW5jdGlvbiBmaW5kTWF0Y2gocmVjLGtleTEsa2V5MixvdGhlckxpc3QpewoJCQkJCXZhciByZXN1bHQgPSAtMTsKCQkJCQlmb3IodmFyIGkgPSAwO2kgPCBvdGhlckxpc3QubGVuZ3RoO2krKyl7CgkJCQkJCWlmKCAocmVjW2tleTFdICYmIHJlY1trZXkxXSA9PT0gb3RoZXJMaXN0W2ldW2tleTFdKSB8fCAocmVjW2tleTJdICYmIHJlY1trZXkyXSA9PT0gb3RoZXJMaXN0W2ldW2tleTJdKSApewoJCQkJCQkJcmVzdWx0ID0gaTsKCQkJCQkJCWJyZWFrOwoJCQkJCQl9CgkJCQkJfQoJCQkJCgkJCQkJcmV0dXJuKCByZXN1bHQgKTsKCQkJCX0KCQkJCQoJCQkJbGV0IGNhbGxiYWNrID0gZnVuY3Rpb24oYXJncyxyZXNwKXsKCQkJCQljb25zb2xlLmxvZyhyZXNwKTsKCQkJCQlsZXQgcmVzdWx0UGFuZWxBID0gdGhpcy5yZXN1bHRQYW5lbEE7CgkJCQkJbGV0IHJlc3VsdFBhbmVsQiA9IHRoaXMucmVzdWx0UGFuZWxCOwoJCQkJCWxldCBpbnB1dCA9IHRoaXMuaW5wdXQ7CgkJCQkJbGV0IHNvdXJjZUEgPSAiQSI7CgkJCQkJbGV0IHNvdXJjZUIgPSAiQiI7CgkJCQkJbGV0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWw7CgkJCQkJCgkJCQkJV0lER0VURkFDVE9SWS5jbGVhckNoaWxkcmVuKHt3aWRnZXQ6IHJlc3VsdFBhbmVsQX0pOwoJCQkJCVdJREdFVEZBQ1RPUlkuY2xlYXJDaGlsZHJlbih7d2lkZ2V0OiByZXN1bHRQYW5lbEJ9KTsKCQkJCQkKCQkJCQlsZXQgZG9jcyA9IHJlc3AuaXRlbXM7CgkJCQkJCgkJCQkJaWYoIGRvY3MubGVuZ3RoID4gMCApewoJCQkJCQlhbGxEYXRhW3NvdXJjZUFdID0ge2RvY3M6IFtkb2NzWzBdXSxyZXN1bHRQYW5lbDogcmVzdWx0UGFuZWxBLHNvdXJjZTogc291cmNlQSxjaGFubmVsOiBjaGFubmVsfTsKCQkJCQkJYWxsRGF0YVtzb3VyY2VBXS5zb3VyY2UgPSBkb2NzWzBdLnNvdXJjZTsKCQkJCQl9CgkJCQkJZWxzZSB7CgkJCQkJCWFsbERhdGFbc291cmNlQV0gPSB7ZG9jczogW10scmVzdWx0UGFuZWw6IHJlc3VsdFBhbmVsQSxzb3VyY2U6IHNvdXJjZUEsY2hhbm5lbDogY2hhbm5lbH07CgkJCQkJfQoJCQkJCQoJCQkJCWlmKCBkb2NzLmxlbmd0aCA+IDEpewoJCQkJCQlhbGxEYXRhW3NvdXJjZUJdID0ge2RvY3M6IFtkb2NzWzFdXSxyZXN1bHRQYW5lbDogcmVzdWx0UGFuZWxCLHNvdXJjZTogc291cmNlQixjaGFubmVsOiBjaGFubmVsfTsKCQkJCQkJYWxsRGF0YVtzb3VyY2VCXS5zb3VyY2UgPSBkb2NzWzFdLnNvdXJjZTsKCQkJCQl9CgkJCQkJZWxzZSB7CgkJCQkJCWFsbERhdGFbc291cmNlQl0gPSB7ZG9jczogW10scmVzdWx0UGFuZWw6IHJlc3VsdFBhbmVsQixzb3VyY2U6IHNvdXJjZUIsY2hhbm5lbDogY2hhbm5lbH07CgkJCQkJfQoJCQkJCQoJCQkJCWxldCBkb25lID0gMDsKCgkJCQkJZm9yKHZhciBwIGluIGFsbERhdGEpewoJCQkJCQlpZiggYWxsRGF0YS5oYXNPd25Qcm9wZXJ0eShwKSApCgkJCQkJCQlkb25lKys7CgkJCQkJfQoJCQkJCQoJCQkJCWlmKCBkb25lID09IDIgKXsKCQkJCQkJbGV0IHNMaXN0ID0gW3NvdXJjZUEsc291cmNlQl07CgkJCQkJCWxldCBhTGlzdCA9IGFsbERhdGFbc291cmNlQV0uZG9jczsKCQkJCQkJbGV0IGJMaXN0ID0gYWxsRGF0YVtzb3VyY2VCXS5kb2NzOwoJCQkJCQkKCQkJCQkJbGV0IGxlZnRDb2xvciA9ICJncmVlbiI7CgkJCQkJCWxldCByaWdodENvbG9yID0gImdyZWVuIjsKCQkJCQkJbGV0IGFEb2NXaWRnZXQ7CgkJCQkJCWxldCBiRG9jV2lkZ2V0OwoJCQkJCQkKCQkJCQkJZm9yKGxldCBpIGluIGFMaXN0KXsKCQkJCQkJY29uc29sZS5sb2coImluZGV4IixpKTsKCQkJCQkJCQkKCQkJCQkJCWlmKCBpID09IDAgKXsKCQkJCQkJCQlhRG9jV2lkZ2V0ID0gV0lER0VURkFDVE9SWS5idWlsZFdpZGdldCh7d2hpY2g6ImRpdiIsaW5uZXJIVE1MOiBhTGlzdC5sZW5ndGggKyAoYUxpc3QubGVuZ3RoID4gMCA/ICIgZG9jcyBmb3VuZCBpbiAiICsgYWxsRGF0YVtzb3VyY2VBXS5zb3VyY2UgOiAiIikgfSk7CgkJCQkJCQkJY29uc29sZS5sb2coImFkb2MiLGFEb2NXaWRnZXQpOwoJCQkJCQkJCVdJREdFVEZBQ1RPUlkuYWRkV2lkZ2V0VG9Db250YWluZXIoe3BhcmVudDogYWxsRGF0YVtzb3VyY2VBXS5yZXN1bHRQYW5lbCxjaGlsZDogYURvY1dpZGdldH0pOwoJCQkJCQkJCQoJCQkJCQkJCWJEb2NXaWRnZXQgPSBXSURHRVRGQUNUT1JZLmJ1aWxkV2lkZ2V0KHt3aGljaDoiZGl2Iixpbm5lckhUTUw6IGJMaXN0Lmxlbmd0aCArIChiTGlzdC5sZW5ndGggPiAwID8gIiBkb2NzIGZvdW5kIGluICIgKyBhbGxEYXRhW3NvdXJjZUJdLnNvdXJjZSA6ICIiKSB9KTsKCQkJCQkJCQkKCQkJCQkJCQlXSURHRVRGQUNUT1JZLmFkZFdpZGdldFRvQ29udGFpbmVyKHtwYXJlbnQ6IGFsbERhdGFbc291cmNlQl0ucmVzdWx0UGFuZWwsY2hpbGQ6IGJEb2NXaWRnZXR9KTsKCQkJCQkJCX0KCQkJCQkJCQoJCQkJCQkJdmFyIG1hdGNoSW5kZXggPSBmaW5kTWF0Y2goYUxpc3RbaV0sImlkIiwiY3VzdG9tZXJfaWRfb3JkZXJfcHJvZHVjdF9pZCIsYkxpc3QpOwoJCQkJCQkJCgkJCQkJCQlpZiggbWF0Y2hJbmRleCA+IC0xICl7CgkJCQkJCQkJaWYoICBtYXRjaEluZGV4ICE9IGkgKXsKCQkJCQkJCQkJaWYoIG1hdGNoSW5kZXggPCBpICl7CgkJCQkJCQkJCQlsZWZ0Q29sb3IgPSAicmVkIjsKCQkJCQkJCQkJCXJpZ2h0Q29sb3IgPSAicmVkIjsKCQkJCQkJCQkJfQoJCQkJCQkJCQllbHNlIHsKCQkJCQkJCQkJCWxlZnRDb2xvciA9ICJncmVlbiI7CgkJCQkJCQkJCQlyaWdodENvbG9yID0gImdyZWVuIjsKCQkJCQkJCQkJfQoJCQkJCQkJCX0KCQkJCQkJCQllbHNlIHsKCQkJCQkJCQkJbGVmdENvbG9yID0gImdyZWVuIjsKCQkJCQkJCQkJcmlnaHRDb2xvciA9ICJncmVlbiI7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQkJZWxzZSB7CgkJCQkJCQkJbGVmdENvbG9yID0gInllbGxvdyI7CgkJCQkJCQkJcmlnaHRDb2xvciA9ICJ5ZWxsb3ciOwoJCQkJCQkJfQoJCQkJCQkJCQoJCQkJCQkJCgkJCQkJCQlsZXQgZW50cnlXaWRnZXRBID0gV0lER0VURkFDVE9SWS5idWlsZFdpZGdldCh7d2hpY2g6InVsIixpbm5lckhUTUw6ICJEb2N1bWVudCAiICsgaSxzdHlsZTogeyJiYWNrZ3JvdW5kLWNvbG9yIjogbGVmdENvbG9yfX0pOwoJCQkJCQkJV0lER0VURkFDVE9SWS5hZGRIYW5kbGVyKHt3aWRnZXQ6IGVudHJ5V2lkZ2V0QSxoYW5kbGVyOiBbe25hbWU6ICJjbGljayIsY2FsbGJhY2s6IGhhbmRsZUNsaWNrLmJpbmQoe2RvYzogYUxpc3RbaV0saW5wdXQ6IGlucHV0fSl9XX0pOwoJCQkJCQkJCQoJCQkJCQkJZm9yKGxldCBhIGluIGFMaXN0W2ldKXsKCQkJCQkJCQlpZiggIWEuc3RhcnRzV2l0aCgiXyIpICYmIFsiaWQiLCJjdXN0b21lcl9pZF9vcmRlcl9wcm9kdWN0X2lkIiwic2NvcmUiLCJxdGltZSIsInJvd2NvdW50IiwidG9wZG9jIiwicXVlcnlfdHh0Il0uaW5kZXhPZihhKSA+IC0xICl7CgkJCQkJCQkJCWxldCBhdHRyaWJ1dGVXaWRnZXQgPSBXSURHRVRGQUNUT1JZLmJ1aWxkV2lkZ2V0KHt3aGljaDoibGkiLGlubmVySFRNTDogYSArICI6ICIgKyBhTGlzdFtpXVthXX0pOwoJCQkJCQkJCQlXSURHRVRGQUNUT1JZLmFkZFdpZGdldFRvQ29udGFpbmVyKHtwYXJlbnQ6IGVudHJ5V2lkZ2V0QSxjaGlsZDogYXR0cmlidXRlV2lkZ2V0fSk7CgkJCQkJCQkJCQoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJCVdJREdFVEZBQ1RPUlkuYWRkV2lkZ2V0VG9Db250YWluZXIoe3BhcmVudDogYURvY1dpZGdldCxjaGlsZDogZW50cnlXaWRnZXRBfSk7CgkJCQkJCQkKCQkJCQkJCWlmKCBpIDwgYkxpc3QubGVuZ3RoICl7CgkJCQkJCQkJbGV0IGVudHJ5V2lkZ2V0QiA9IFdJREdFVEZBQ1RPUlkuYnVpbGRXaWRnZXQoe3doaWNoOiJ1bCIsaW5uZXJIVE1MOiAiRG9jdW1lbnQgIiArIGksc3R5bGU6IHsiYmFja2dyb3VuZC1jb2xvciI6IHJpZ2h0Q29sb3J9fSk7CgkJCQkJCQkJV0lER0VURkFDVE9SWS5hZGRIYW5kbGVyKHt3aWRnZXQ6IGVudHJ5V2lkZ2V0QixoYW5kbGVyOiBbe25hbWU6ICJjbGljayIsY2FsbGJhY2s6IGhhbmRsZUNsaWNrLmJpbmQoe2RvYzogYkxpc3RbaV0saW5wdXQ6IGlucHV0fSl9XX0pOwoJCQkJCQkJCQkJCgkJCQkJCQkJZm9yKGxldCBhIGluIGJMaXN0W2ldKXsKCQkJCQkJCQkJaWYoICFhLnN0YXJ0c1dpdGgoIl8iKSAmJiBbImlkIiwiY3VzdG9tZXJfaWRfb3JkZXJfcHJvZHVjdF9pZCIsInNjb3JlIiwicXRpbWUiLCJyb3djb3VudCIsInRvcGRvYyIsInF1ZXJ5X3R4dCJdLmluZGV4T2YoYSkgPiAtMSApewoJCQkJCQkJCQkJbGV0IGF0dHJpYnV0ZVdpZGdldCA9IFdJREdFVEZBQ1RPUlkuYnVpbGRXaWRnZXQoe3doaWNoOiJsaSIsaW5uZXJIVE1MOiBhICsgIjogIiArIGJMaXN0W2ldW2FdfSk7CgkJCQkJCQkJCQlXSURHRVRGQUNUT1JZLmFkZFdpZGdldFRvQ29udGFpbmVyKHtwYXJlbnQ6IGVudHJ5V2lkZ2V0QixjaGlsZDogYXR0cmlidXRlV2lkZ2V0fSk7CgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQkJV0lER0VURkFDVE9SWS5hZGRXaWRnZXRUb0NvbnRhaW5lcih7cGFyZW50OiBiRG9jV2lkZ2V0LGNoaWxkOiBlbnRyeVdpZGdldEJ9KTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCQkKCQkJCQlnZXRDdXJyZW50Q29udGV4dCgpLnNldEJ1c3koKTsKCQkJCX0KCQkJCQoJCQkJY29uc29sZS5sb2coc2VhcmNoQm94LG1lc3NhZ2VCb3gscmVzdWx0UGFuZWxBLHJlc3VsdFBhbmVsQik7CgkJCQlsZXQgaW5wdXQgPSBzZWFyY2hCb3gudmFsdWU7CgkJCQlnZXRDdXJyZW50Q29udGV4dCgpLnNldEJ1c3kodHJ1ZSwiQ09NUEFSRSIpOwkKCQkJCWxldCBuZXdDYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQoe3BhcmVudDogY29udGFpbmVyLHJlc3VsdFBhbmVsQTogcmVzdWx0UGFuZWxBLHJlc3VsdFBhbmVsQjogcmVzdWx0UGFuZWxCLGlucHV0OiBpbnB1dCxzZWFyY2hCb3g6IHNlYXJjaEJveCx0ZXN0OiB0ZXN0fSk7CgkJCQlnZXRDdXJyZW50Q29udGV4dCgpLkNhY2hlTWFuYWdlci5nZXREYXRhKHtjb250ZW50dHlwZTogIkNPTVBBUkUiLHdpbmRvdzogd2luZG93LHF1ZXJ5OnsgY29udGVudHR5cGU6ICJDT01QQVJFIixwYXJlbnRpZDogaW5wdXQsdGVzdG5hbWU6IHRlc3QudGVzdG5hbWV9LGNhbGxiYWNrOiBuZXdDYWxsYmFjayxub2NhY2hlOiB0cnVlfSk7CQkJCQoKfQ==","testsummaryscript":"","testsummaryscript_s":"testName=siemens","id":"TEST1598994530023","contenttype":"TEST","crawldate":"2020-09-01T22:21:21.027Z","testcopyscript":""}