[ {
  "id" : "ParkerDotComMain_signals-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "728ff1a8-19dc-45fd-a9be-4a506538e6b9",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "728ff1a8-19dc-45fd-a9be-4a506538e6b9"
  }, {
    "type" : "search-fields",
    "id" : "d3f8ddee-1013-47f2-86bd-b777d3791529",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "d3f8ddee-1013-47f2-86bd-b777d3791529"
  }, {
    "type" : "facet",
    "id" : "16f689a7-7d2b-4f60-bc2f-e6ce9e72b3ca",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "16f689a7-7d2b-4f60-bc2f-e6ce9e72b3ca"
  }, {
    "type" : "solr-query",
    "id" : "a97db731-641e-4354-832a-006fadd4766a",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "a97db731-641e-4354-832a-006fadd4766a"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain_signals-default"
  }
}, {
  "id" : "ParkerDotComSuggest-EN",
  "stages" : [ {
    "type" : "set-params",
    "id" : "jy",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:EN",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Localization",
    "secretSourceStageId" : "jy"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-000",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_product_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_general_text"
    }, {
      "field" : "autosuggest_support_text"
    } ],
    "returnFields" : [ "title_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest All",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-000"
  }, {
    "type" : "search-fields",
    "id" : "gpp",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_general_text"
    } ],
    "returnFields" : [ "title_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest General",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'news-events' || request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "gpp"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-400",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_product_text"
    } ],
    "returnFields" : [ "title_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Products",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-400"
  }, {
    "type" : "search-fields",
    "id" : "2bo",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_support_text"
    } ],
    "returnFields" : [ "title_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "2bo"
  }, {
    "type" : "set-params",
    "id" : "vaq",
    "params" : [ {
      "key" : "bq",
      "value" : "siteSubSection_ss:Product Category^10",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Boost Product Category",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "vaq"
  }, {
    "type" : "set-params",
    "id" : "tru",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSection_ss:News and Events",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News & Events",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "tru"
  }, {
    "type" : "set-params",
    "id" : "o2t",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "o2t"
  }, {
    "type" : "set-params",
    "id" : "rrr",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter Events",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "rrr"
  }, {
    "type" : "set-params",
    "id" : "ll",
    "params" : [ {
      "key" : "defType",
      "value" : "lucene",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "secretSourceStageId" : "ll"
  }, {
    "type" : "solr-query",
    "id" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComSuggest-EN"
  }
}, {
  "id" : "ParkerDotComMain-CS",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionCS_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleCS_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionCS_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleCS_t", "descriptionCS_t", "siteSectionCS_ss", "siteSubSectionCS_ss", "supportResourceTypeCS_ss", "supportTypeCS_ss", "ECOM_JSON_URL_s", "productCS_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionCS_facet", "siteSectionCS_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleCS_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionCS_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleCS_t", "descriptionCS_t", "siteSectionCS_ss", "siteSubSectionCS_ss", "supportResourceTypeCS_ss", "supportTypeCS_ss", "ECOM_JSON_URL_s", "productCS_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionCS_facet", "siteSectionCS_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1CS_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1CS_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1CS\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2CS_facet}productTaxonomyL2CS_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2CS_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1CS\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2CS_facet}productTaxonomyL2CS_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2CS_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2CS_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3CS_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3CS_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLCS THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeCS_facetg_technologyCS_facet}technologyCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleCS_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionCS~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleCS_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionCS~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"CS\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-CS"
  }
}, {
  "id" : "ParkerDotComMain-Events",
  "stages" : [ {
    "type" : "set-params",
    "id" : "s7",
    "params" : [ {
      "key" : "fq",
      "value" : "eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS]",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to events 3 years or newer",
    "secretSourceStageId" : "s7"
  }, {
    "type" : "set-params",
    "id" : "az",
    "params" : [ {
      "key" : "fq",
      "value" : "newsEventsType_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Enforce Events Only Documents",
    "secretSourceStageId" : "az"
  }, {
    "type" : "javascript-query",
    "id" : "my9",
    "script" : "var req = request.getParams();\nvar query = request.getFirstParam('q');\n//logger.info(\"zzz QUERY: \" + query);\nvar fqs = request.getParam('fq');\n//logger.info(\"zzz fqs: \" + fqs);\nvar language = \"\";\nvar country = \"\";\nvar division = \"\";\n\nfor each (var item in fqs){\n  \n  // LANGUAGE\n if (item.indexOf('languageCode_ss')==0){\n     var tmp = item.split(':');\n     var language = tmp[1];\n     //logger.info(\"zzz Language: \" + language);\n     }\n  \n  // COUNTRY\n if (item.indexOf('countryId_ss')==0){\n     var tmp = item.split(':');\n     var country = tmp[1];\n     //logger.info(\"zzz Country: \" + country);\n     }  \n\n  // DIVISION\n if (item.indexOf('parkerDivision_ss')==0){\n     var tmp = item.split(':');\n     var division = tmp[1];\n     //logger.info(\"zzz Division: \" + division);\n     }  \n  \n //logger.info(\"zzz FQS: \" + item); \n}\n\nvar rows = request.getFirstParam('rows');\n//logger.info(\"zzz Rows: \" + rows);\n\nvar title=\"title\" + language + \"_t\";\n//logger.info(\"zzz Title Field: \" + title);\nvar description=\"description\" + language + \"_t\";\nvar body =\"body_t\";\n\n//request.removeParam(\"sort\");\n//request.addParam(\"sort\", \"eventStart_dt asc\");\nrequest.addParam(\"qf\",title+\"^5\");\nrequest.addParam(\"qf\",description+\"^2\");\nrequest.addParam(\"qf\",body+\"^1\");\nrequest.addParam(\"qf\",\"_text_^1\");\n\nvar fieldList = title +\",\" + description + \",\" + \"ot_id_s,\" + \"languageCode_ss,\" + \"otChannel_0_s,\" + \"otContentTypeId_s,\" +  \"otF6_s,\" + \"newsType_ss,\" + \"eventAddress_t,\" + \"eventDisplayEnd_dt,\" + \"eventDisplayStart_dt,\" + \"eventEnd_dt,\" + \"eventStart_dt,\" + \"eventType_ss,\" + \"eventYear_i,\" + \"technology_ss,\" + \"otF3,\" + \"urlKeyword_s,\" + \"score\";\nrequest.addParam(\"fl\",fieldList);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Interpret Parameters and Configure Pipeline",
    "secretSourceStageId" : "my9"
  }, {
    "type" : "recommendation",
    "id" : "38a547fb-d9ab-4a11-baec-6ce9bb7f72ca",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "38a547fb-d9ab-4a11-baec-6ce9bb7f72ca",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "facet",
    "id" : "8cb83cc0-6c3f-44a6-8964-ae90e6253955",
    "fieldFacets" : [ {
      "field" : "newsEventsType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "8cb83cc0-6c3f-44a6-8964-ae90e6253955",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "solr-query",
    "id" : "f61dc4a6-2d6b-40a2-99b1-b51f33501bb6",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "f61dc4a6-2d6b-40a2-99b1-b51f33501bb6",
    "properties" : {
      "autoCreated" : true
    }
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-Events"
  }
}, {
  "id" : "MyParkerDotComMain-NL",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionNL_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleNL_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionNL_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleNL_t", "descriptionNL_t", "siteSectionNL_ss", "siteSubSectionNL_ss", "supportResourceTypeNL_ss", "supportTypeNL_ss", "ECOM_JSON_URL_s", "productNL_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionNL_facet", "siteSectionNL_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleNL_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionNL_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleNL_t", "descriptionNL_t", "siteSectionNL_ss", "siteSubSectionNL_ss", "supportResourceTypeNL_ss", "supportTypeNL_ss", "ECOM_JSON_URL_s", "productNL_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionNL_facet", "siteSectionNL_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1NL_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1NL_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1NL\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2NL_facet}productTaxonomyL2NL_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2NL_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1NL\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2NL_facet}productTaxonomyL2NL_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2NL_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2NL_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3NL_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3NL_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLNL THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNL_facetg_technologyNL_facet}technologyNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleNL_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionNL~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleNL_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionNL~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"NL\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-NL"
  }
}, {
  "id" : "ParkerDotComMain-TH",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionTH_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTH_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTH_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTH_t", "descriptionTH_t", "siteSectionTH_ss", "siteSubSectionTH_ss", "supportResourceTypeTH_ss", "supportTypeTH_ss", "ECOM_JSON_URL_s", "productTH_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTH_facet", "siteSectionTH_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTH_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTH_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTH_t", "descriptionTH_t", "siteSectionTH_ss", "siteSubSectionTH_ss", "supportResourceTypeTH_ss", "supportTypeTH_ss", "ECOM_JSON_URL_s", "productTH_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTH_facet", "siteSectionTH_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1TH_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1TH_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TH\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TH_facet}productTaxonomyL2TH_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2TH_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TH\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TH_facet}productTaxonomyL2TH_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2TH_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2TH_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TH_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TH_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLTH THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTH_facetg_technologyTH_facet}technologyTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTH_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTH~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTH_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTH~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"TH\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-TH"
  }
}, {
  "id" : "MyParkerDotComMain-NO",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionNO_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleNO_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionNO_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleNO_t", "descriptionNO_t", "siteSectionNO_ss", "siteSubSectionNO_ss", "supportResourceTypeNO_ss", "supportTypeNO_ss", "ECOM_JSON_URL_s", "productNO_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionNO_facet", "siteSectionNO_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleNO_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionNO_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleNO_t", "descriptionNO_t", "siteSectionNO_ss", "siteSubSectionNO_ss", "supportResourceTypeNO_ss", "supportTypeNO_ss", "ECOM_JSON_URL_s", "productNO_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionNO_facet", "siteSectionNO_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1NO_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1NO_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1NO\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2NO_facet}productTaxonomyL2NO_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2NO_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1NO\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2NO_facet}productTaxonomyL2NO_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2NO_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2NO_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3NO_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3NO_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLNO THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNO_facetg_technologyNO_facet}technologyNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleNO_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionNO~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleNO_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionNO~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"NO\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-NO"
  }
}, {
  "id" : "MyParkerDotComMain-FI",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionFI_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleFI_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionFI_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleFI_t", "descriptionFI_t", "siteSectionFI_ss", "siteSubSectionFI_ss", "supportResourceTypeFI_ss", "supportTypeFI_ss", "ECOM_JSON_URL_s", "productFI_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionFI_facet", "siteSectionFI_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleFI_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionFI_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleFI_t", "descriptionFI_t", "siteSectionFI_ss", "siteSubSectionFI_ss", "supportResourceTypeFI_ss", "supportTypeFI_ss", "ECOM_JSON_URL_s", "productFI_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionFI_facet", "siteSectionFI_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1FI_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1FI_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1FI\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2FI_facet}productTaxonomyL2FI_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2FI_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1FI\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2FI_facet}productTaxonomyL2FI_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2FI_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2FI_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3FI_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3FI_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLFI THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFI_facetg_technologyFI_facet}technologyFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleFI_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionFI~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleFI_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionFI~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"FI\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-FI"
  }
}, {
  "id" : "MyParkerDotComMain-RU",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionRU_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleRU_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionRU_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleRU_t", "descriptionRU_t", "siteSectionRU_ss", "siteSubSectionRU_ss", "supportResourceTypeRU_ss", "supportTypeRU_ss", "ECOM_JSON_URL_s", "productRU_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionRU_facet", "siteSectionRU_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleRU_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionRU_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleRU_t", "descriptionRU_t", "siteSectionRU_ss", "siteSubSectionRU_ss", "supportResourceTypeRU_ss", "supportTypeRU_ss", "ECOM_JSON_URL_s", "productRU_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionRU_facet", "siteSectionRU_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1RU_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1RU_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1RU\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2RU_facet}productTaxonomyL2RU_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2RU_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1RU\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2RU_facet}productTaxonomyL2RU_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2RU_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2RU_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3RU_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3RU_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLRU THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeRU_facetg_technologyRU_facet}technologyRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleRU_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionRU~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleRU_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionRU~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"RU\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-RU"
  }
}, {
  "id" : "MyParkerDotComMain-JP",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionJP_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleJP_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionJP_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleJP_t", "descriptionJP_t", "siteSectionJP_ss", "siteSubSectionJP_ss", "supportResourceTypeJP_ss", "supportTypeJP_ss", "ECOM_JSON_URL_s", "productJP_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionJP_facet", "siteSectionJP_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleJP_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionJP_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleJP_t", "descriptionJP_t", "siteSectionJP_ss", "siteSubSectionJP_ss", "supportResourceTypeJP_ss", "supportTypeJP_ss", "ECOM_JSON_URL_s", "productJP_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionJP_facet", "siteSectionJP_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1JP_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1JP_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1JP\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2JP_facet}productTaxonomyL2JP_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2JP_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1JP\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2JP_facet}productTaxonomyL2JP_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2JP_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2JP_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3JP_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3JP_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLJP THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeJP_facetg_technologyJP_facet}technologyJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleJP_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionJP~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleJP_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionJP~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"JP\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-JP"
  }
}, {
  "id" : "MyParkerDotComMain-EN",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionEN_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleEN_t", "descriptionEN_t", "siteSectionEN_ss", "siteSubSectionEN_ss", "supportResourceTypeEN_ss", "supportTypeEN_ss", "ECOM_JSON_URL_s", "productEN_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionEN_facet", "siteSectionEN_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleEN_t", "descriptionEN_t", "siteSectionEN_ss", "siteSubSectionEN_ss", "supportResourceTypeEN_ss", "supportTypeEN_ss", "ECOM_JSON_URL_s", "productEN_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionEN_facet", "siteSectionEN_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1EN_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1EN_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1EN\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2EN_facet}productTaxonomyL2EN_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2EN_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1EN\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2EN_facet}productTaxonomyL2EN_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2EN_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2EN_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3EN_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3EN_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLEN THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facetg_technologyEN_facet}technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleEN_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionEN~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleEN_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionEN~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"EN\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(defaultCollection,which) {\n   \t\t var docList = [];\n\n\t\t var HttpURLConnection = java.net.HttpURLConnection;\n    \t\tvar URL = java.net.URL;\n    \t\tvar InputStreamReader = java.io.InputStreamReader;\n    \t\tvar BufferedReader = java.io.BufferedReader;\n\n\n      \t\ttry {\n     \t\t\tvar url = new URL(\"http://localhost:8764/api/apollo/solr/\" + defaultCollection + \"/spell?wt=json&spell.dictionary=suggestparts&spellcheck.q=\" + which + \"\");\n        \n      \t\t\tvar c = java.net.HttpURLConnection;\n      \t\t\tc = url.openConnection();\n      \t\t\tc.setRequestProperty(\"Authorization\", \"Basic YWRtaW46UGFya2VyMTIz\");\n      \t\t\tc.connect();\n      \t\t\tvar status = c.getResponseCode();\n      \t\t\t\n      \t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n       \t\t\t\t var reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\t\t var json = reader.readLine();\n\t\t\t\t\t //docList.push(json);\n        \t\t\t var response = JSON.parse(json);\n        \t\t\t \n\t\t\t\t\t var spellcheck = response.spellcheck;\n\t\t\t\t\t //docList.push(spellcheck);\n\t\t\t\t\t\t\n\t\t\t\t\tif( spellcheck ){\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar suggestions = spellcheck.suggestions;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//docList.push(suggestions);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif( suggestions && suggestions.length > 1 ){\n\t\t\t\t\t\t\t//docList.push(suggestions[1]);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(var su in suggestions[1].suggestion){\n\t\t\t\t\t\t\t\tdocList.push(suggestions[1].suggestion[su].word);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n      \t\t\t}\n    \t\t} catch (e) {\n      \t\t\tlogger.error(e);\n\t\t\t\tdocList.push(\"error\" + e);\n    \t\t\t}\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n\n\tvar docList = doQuery(\"ParkerDotComMain\",queryStr);\n  logger.info(\"zzz doclist: \" + docList.length)\n  \n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"suggest_parts_q\");\nif( queryStr ){\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-EN"
  }
}, {
  "id" : "MyParkerDotComMain-IT",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionIT_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleIT_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionIT_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleIT_t", "descriptionIT_t", "siteSectionIT_ss", "siteSubSectionIT_ss", "supportResourceTypeIT_ss", "supportTypeIT_ss", "ECOM_JSON_URL_s", "productIT_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionIT_facet", "siteSectionIT_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleIT_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionIT_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleIT_t", "descriptionIT_t", "siteSectionIT_ss", "siteSubSectionIT_ss", "supportResourceTypeIT_ss", "supportTypeIT_ss", "ECOM_JSON_URL_s", "productIT_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionIT_facet", "siteSectionIT_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1IT_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1IT_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1IT\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2IT_facet}productTaxonomyL2IT_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2IT_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1IT\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2IT_facet}productTaxonomyL2IT_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2IT_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2IT_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3IT_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3IT_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLIT THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeIT_facetg_technologyIT_facet}technologyIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleIT_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionIT~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleIT_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionIT~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"IT\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-IT"
  }
}, {
  "id" : "MyParkerDotComMain-ZH",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionZH_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleZH_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionZH_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleZH_t", "descriptionZH_t", "siteSectionZH_ss", "siteSubSectionZH_ss", "supportResourceTypeZH_ss", "supportTypeZH_ss", "ECOM_JSON_URL_s", "productZH_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionZH_facet", "siteSectionZH_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleZH_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionZH_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleZH_t", "descriptionZH_t", "siteSectionZH_ss", "siteSubSectionZH_ss", "supportResourceTypeZH_ss", "supportTypeZH_ss", "ECOM_JSON_URL_s", "productZH_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionZH_facet", "siteSectionZH_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1ZH_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1ZH_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1ZH\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2ZH_facet}productTaxonomyL2ZH_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2ZH_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1ZH\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2ZH_facet}productTaxonomyL2ZH_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2ZH_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2ZH_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3ZH_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3ZH_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLZH THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeZH_facetg_technologyZH_facet}technologyZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleZH_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionZH~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleZH_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionZH~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"ZH\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-ZH"
  }
}, {
  "id" : "MyParkerDotComMain-ES",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionES_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleES_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionES_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleES_t", "descriptionES_t", "siteSectionES_ss", "siteSubSectionES_ss", "supportResourceTypeES_ss", "supportTypeES_ss", "ECOM_JSON_URL_s", "productES_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionES_facet", "siteSectionES_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleES_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionES_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleES_t", "descriptionES_t", "siteSectionES_ss", "siteSubSectionES_ss", "supportResourceTypeES_ss", "supportTypeES_ss", "ECOM_JSON_URL_s", "productES_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionES_facet", "siteSectionES_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1ES_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1ES_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1ES\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2ES_facet}productTaxonomyL2ES_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2ES_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1ES\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2ES_facet}productTaxonomyL2ES_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2ES_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2ES_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3ES_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3ES_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLES THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeES_facetg_technologyES_facet}technologyES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleES_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionES~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleES_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionES~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"ES\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-ES"
  }
}, {
  "id" : "ParkerDotComMain_rules-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "107bef9e-be7f-40be-8a0a-f06c7328a6fe",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "107bef9e-be7f-40be-8a0a-f06c7328a6fe"
  }, {
    "type" : "search-fields",
    "id" : "50c27957-18cb-40e5-9515-d9eaca7dacf4",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "50c27957-18cb-40e5-9515-d9eaca7dacf4"
  }, {
    "type" : "facet",
    "id" : "f61f0863-cd90-409b-b800-208ff290f580",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "f61f0863-cd90-409b-b800-208ff290f580"
  }, {
    "type" : "solr-query",
    "id" : "7da6ec21-65d3-45a8-ad28-bf2e73ff02a0",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "7da6ec21-65d3-45a8-ad28-bf2e73ff02a0"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain_rules-default"
  }
}, {
  "id" : "ParkerDotComMain-KO",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionKO_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleKO_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionKO_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleKO_t", "descriptionKO_t", "siteSectionKO_ss", "siteSubSectionKO_ss", "supportResourceTypeKO_ss", "supportTypeKO_ss", "ECOM_JSON_URL_s", "productKO_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionKO_facet", "siteSectionKO_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleKO_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionKO_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleKO_t", "descriptionKO_t", "siteSectionKO_ss", "siteSubSectionKO_ss", "supportResourceTypeKO_ss", "supportTypeKO_ss", "ECOM_JSON_URL_s", "productKO_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionKO_facet", "siteSectionKO_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1KO_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1KO_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1KO\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2KO_facet}productTaxonomyL2KO_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2KO_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1KO\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2KO_facet}productTaxonomyL2KO_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2KO_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2KO_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3KO_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3KO_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLKO THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeKO_facetg_technologyKO_facet}technologyKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleKO_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionKO~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleKO_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionKO~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"KO\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-KO"
  }
}, {
  "id" : "ParkerDotComMain-SV",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionSV_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleSV_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionSV_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleSV_t", "descriptionSV_t", "siteSectionSV_ss", "siteSubSectionSV_ss", "supportResourceTypeSV_ss", "supportTypeSV_ss", "ECOM_JSON_URL_s", "productSV_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionSV_facet", "siteSectionSV_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleSV_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionSV_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleSV_t", "descriptionSV_t", "siteSectionSV_ss", "siteSubSectionSV_ss", "supportResourceTypeSV_ss", "supportTypeSV_ss", "ECOM_JSON_URL_s", "productSV_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionSV_facet", "siteSectionSV_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1SV_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1SV_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1SV\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2SV_facet}productTaxonomyL2SV_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2SV_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1SV\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2SV_facet}productTaxonomyL2SV_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2SV_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2SV_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3SV_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3SV_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLSV THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologySV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeSV_facetg_technologySV_facet}technologySV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologySV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologySV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleSV_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionSV~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleSV_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionSV~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"SV\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-SV"
  }
}, {
  "id" : "ParkerDotComMain_logs-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "1d167f63-e600-4189-bf93-95451308f199",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "1d167f63-e600-4189-bf93-95451308f199"
  }, {
    "type" : "search-fields",
    "id" : "a003e6e8-6d29-4d81-a091-f3a4f347903e",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "a003e6e8-6d29-4d81-a091-f3a4f347903e"
  }, {
    "type" : "facet",
    "id" : "0ae0cb50-9c7c-4ae9-afb5-62e55732fccc",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "0ae0cb50-9c7c-4ae9-afb5-62e55732fccc"
  }, {
    "type" : "solr-query",
    "id" : "3c47166b-64a1-4395-a59d-fe69159bf818",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "3c47166b-64a1-4395-a59d-fe69159bf818"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain_logs-default"
  }
}, {
  "id" : "ParkerDotComMainMaster_signals-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "d76c7ecf-0de7-41ba-8ef1-322ee57b54bc",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "d76c7ecf-0de7-41ba-8ef1-322ee57b54bc"
  }, {
    "type" : "search-fields",
    "id" : "6319e76e-b70e-48b9-b6ac-2ffb6bd0a640",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "6319e76e-b70e-48b9-b6ac-2ffb6bd0a640"
  }, {
    "type" : "facet",
    "id" : "eadc3e60-20c5-4292-a6bb-496562579e24",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "eadc3e60-20c5-4292-a6bb-496562579e24"
  }, {
    "type" : "solr-query",
    "id" : "436bf43c-bac2-43e6-8bee-0c3e00ecfab8",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "436bf43c-bac2-43e6-8bee-0c3e00ecfab8"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMainMaster_signals-default"
  }
}, {
  "id" : "MyParkerDotComMain-VI",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionVI_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleVI_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionVI_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleVI_t", "descriptionVI_t", "siteSectionVI_ss", "siteSubSectionVI_ss", "supportResourceTypeVI_ss", "supportTypeVI_ss", "ECOM_JSON_URL_s", "productVI_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionVI_facet", "siteSectionVI_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleVI_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionVI_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleVI_t", "descriptionVI_t", "siteSectionVI_ss", "siteSubSectionVI_ss", "supportResourceTypeVI_ss", "supportTypeVI_ss", "ECOM_JSON_URL_s", "productVI_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionVI_facet", "siteSectionVI_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1VI_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1VI_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1VI\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2VI_facet}productTaxonomyL2VI_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2VI_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1VI\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2VI_facet}productTaxonomyL2VI_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2VI_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2VI_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3VI_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3VI_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLVI THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeVI_facetg_technologyVI_facet}technologyVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleVI_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionVI~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleVI_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionVI~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"VI\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-VI"
  }
}, {
  "id" : "ParkerDotComMain-FR",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionFR_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleFR_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionFR_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleFR_t", "descriptionFR_t", "siteSectionFR_ss", "siteSubSectionFR_ss", "supportResourceTypeFR_ss", "supportTypeFR_ss", "ECOM_JSON_URL_s", "productFR_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionFR_facet", "siteSectionFR_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleFR_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionFR_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleFR_t", "descriptionFR_t", "siteSectionFR_ss", "siteSubSectionFR_ss", "supportResourceTypeFR_ss", "supportTypeFR_ss", "ECOM_JSON_URL_s", "productFR_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionFR_facet", "siteSectionFR_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1FR_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1FR_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1FR\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2FR_facet}productTaxonomyL2FR_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2FR_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1FR\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2FR_facet}productTaxonomyL2FR_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2FR_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2FR_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3FR_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3FR_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLFR THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFR_facetg_technologyFR_facet}technologyFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleFR_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionFR~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleFR_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionFR~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"FR\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-FR"
  }
}, {
  "id" : "MyParkerDotComMain-EN2",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionEN_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleEN_t", "descriptionEN_t", "siteSectionEN_ss", "siteSubSectionEN_ss", "supportResourceTypeEN_ss", "supportTypeEN_ss", "ECOM_JSON_URL_s", "productEN_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionEN_facet", "siteSectionEN_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleEN_t", "descriptionEN_t", "siteSectionEN_ss", "siteSubSectionEN_ss", "supportResourceTypeEN_ss", "supportTypeEN_ss", "ECOM_JSON_URL_s", "productEN_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionEN_facet", "siteSectionEN_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1EN_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1EN_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1EN\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2EN_facet}productTaxonomyL2EN_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2EN_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1EN\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2EN_facet}productTaxonomyL2EN_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2EN_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2EN_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3EN_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3EN_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLEN THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facetg_technologyEN_facet}technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleEN_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionEN~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleEN_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionEN~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"EN\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-EN2"
  }
}, {
  "id" : "_lw_qwb_tmp_15398571519208445",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "recommendation",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "5387a171-00ea-48b8-af91-06609a4656cb",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "compressedPartNumber_t",
      "boost" : 100.0
    }, {
      "field" : "parkerPartNumber_t",
      "boost" : 100.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 4.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 5.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 6.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 7.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 8.0
    }, {
      "field" : "title_t",
      "boost" : 10.0
    }, {
      "field" : "description_t",
      "boost" : 7.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    } ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields",
    "secretSourceStageId" : "5387a171-00ea-48b8-af91-06609a4656cb"
  }, {
    "type" : "facet",
    "id" : "542b5219-b9bc-497e-a2f7-625cf05bb657",
    "fieldFacets" : [ {
      "field" : "contentSource_s",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "siteSection_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "_lw_data_source_s",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "customerIds_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyEN_facet",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "General Facets",
    "secretSourceStageId" : "542b5219-b9bc-497e-a2f7-625cf05bb657",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "facet",
    "id" : "6qp",
    "fieldFacets" : [ {
      "field" : "productTaxonomyL2_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL3_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL1_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_s",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Product-Part Facets",
    "secretSourceStageId" : "6qp"
  }, {
    "type" : "facet",
    "id" : "xft",
    "fieldFacets" : [ {
      "field" : "supportType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "supportResourceType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "cadType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Support Facets",
    "secretSourceStageId" : "xft"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "hl.fl",
      "value" : "*",
      "policy" : "append"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSection_ss}siteSubSection_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_productTaxonomyL1_s}productTaxonomyL1_s",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  } ],
  "properties" : {
    "forSimulation" : "true",
    "secretSourcePipelineId" : "_lw_qwb_tmp_15398571519208445",
    "lastModified" : "1558115114"
  }
}, {
  "id" : "ParkerDotComMainMaster-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "50e16759-c627-4cfe-abf2-ad903e880017",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "50e16759-c627-4cfe-abf2-ad903e880017"
  }, {
    "type" : "search-fields",
    "id" : "8fec9151-61fa-4569-bc8c-fe8ad95dc649",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "8fec9151-61fa-4569-bc8c-fe8ad95dc649"
  }, {
    "type" : "facet",
    "id" : "b5c58ec1-934d-4471-83e9-904b73547a6e",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "b5c58ec1-934d-4471-83e9-904b73547a6e"
  }, {
    "type" : "solr-query",
    "id" : "72c53bef-6ade-4236-95b2-8360f6239d82",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "72c53bef-6ade-4236-95b2-8360f6239d82"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMainMaster-default"
  }
}, {
  "id" : "ParkerDotComSuggest",
  "stages" : [ {
    "type" : "set-params",
    "id" : "lc4",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "lc4"
  }, {
    "type" : "set-params",
    "id" : "5s",
    "params" : [ {
      "key" : "fl",
      "value" : "title_s,countryId_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,productType_ss,productType_s,productSeriesId_l,parkerPartNumber_s,categoryIdList_s",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Field List for Suggest",
    "secretSourceStageId" : "5s"
  }, {
    "type" : "javascript-query",
    "id" : "63b",
    "script" : "function findOring(q){\n  \n  var result = false;\n  \n  logger.info(\"zzz incoming query is: \" + q);\n  \n  var location = q.indexOf(\"o r\");\n  logger.info(\"zzz location is \"+  location); \n  \n  if (q.indexOf(\"o r\")!= -1){ \n    logger.info(\"zzz found an o-ring\");\n    result=true; \n  }\n  else\n  {\n    logger.info(\"zzz did not find an o-ring\");\n  }\n   \n\n  \n  return result;\n}\n\nvar query = request.getFirstParam(\"q\")\nlogger.info(\"zzz suggest query is: \" + query);\n\nif (findOring(query)){\n  logger.info(\"zzz found an o-ring for sure\");\n  var changedQuery = query.replace(/o r/,\"o-r\");\n logger.info(\"zzz new query is \" + changedQuery); \n  \n  request.removeParam(\"q\");\nrequest.addParam(\"q\",changedQuery);\n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Handle Query",
    "secretSourceStageId" : "63b"
  }, {
    "type" : "set-params",
    "id" : "mrt",
    "params" : [ {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Boost by Taxonomy",
    "secretSourceStageId" : "mrt"
  }, {
    "type" : "set-params",
    "id" : "7ar",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7ar"
  }, {
    "type" : "facet",
    "id" : "bto",
    "fieldFacets" : [ {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivision_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_s",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "bto",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "fz",
    "params" : [ {
      "key" : "fq",
      "value" : "title_s:*",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "title_s~1^5",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Titles Are Required",
    "secretSourceStageId" : "fz"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-000",
    "rows" : 20,
    "start" : 0,
    "sort" : "",
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 5.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 4.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 2.0
    }, {
      "field" : "autosuggest_general_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_text",
      "boost" : 1.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "parkerDivision_ss",
      "boost" : 1.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "id", "countryCode_ss", "storeId_l", "score", "isL1_s", "isL2_s", "isL3_s", "urlKeyword_exact" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest All",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-000"
  }, {
    "type" : "search-fields",
    "id" : "gpp",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_general_text"
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest General",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'news-events' || request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "gpp"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-400",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Products",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-400"
  }, {
    "type" : "search-fields",
    "id" : "2bo",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_support_text",
      "boost" : 100.0
    }, {
      "field" : "autosuggest_support_config_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_cad_text",
      "boost" : 1.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "2bo"
  }, {
    "type" : "set-params",
    "id" : "tru",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSection_ss:News and Events",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News & Events",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "tru"
  }, {
    "type" : "set-params",
    "id" : "o2t",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "o2t"
  }, {
    "type" : "set-params",
    "id" : "rrr",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter Events",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "rrr"
  }, {
    "type" : "set-params",
    "id" : "3l",
    "params" : [ {
      "key" : "tie",
      "value" : "0.99",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_category_text^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "urlKeyword_exactish^4",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_pseries_text^2",
      "policy" : "append"
    }, {
      "key" : "sort",
      "value" : "parkerPartNumber_s asc",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Relevancy Adjustments",
    "secretSourceStageId" : "3l"
  }, {
    "type" : "set-params",
    "id" : "fb",
    "params" : [ {
      "key" : "group",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "group.field",
      "value" : "suggest_type_s",
      "policy" : "append"
    }, {
      "key" : "group.limit",
      "value" : "6",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Suggest Grouping",
    "secretSourceStageId" : "fb"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$contains_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "solr-query",
    "id" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComSuggest"
  }
}, {
  "id" : "MyParkerDotComMain-DK",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionDK_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleDK_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionDK_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleDK_t", "descriptionDK_t", "siteSectionDK_ss", "siteSubSectionDK_ss", "supportResourceTypeDK_ss", "supportTypeDK_ss", "ECOM_JSON_URL_s", "productDK_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionDK_facet", "siteSectionDK_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleDK_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionDK_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleDK_t", "descriptionDK_t", "siteSectionDK_ss", "siteSubSectionDK_ss", "supportResourceTypeDK_ss", "supportTypeDK_ss", "ECOM_JSON_URL_s", "productDK_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionDK_facet", "siteSectionDK_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1DK_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1DK_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1DK\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2DK_facet}productTaxonomyL2DK_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2DK_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1DK\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2DK_facet}productTaxonomyL2DK_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2DK_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2DK_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3DK_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3DK_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLDK THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDK_facetg_technologyDK_facet}technologyDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleDK_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionDK~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleDK_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionDK~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"DK\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-DK"
  }
}, {
  "id" : "ParkerDotComMain-NL",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionNL_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleNL_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionNL_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleNL_t", "descriptionNL_t", "siteSectionNL_ss", "siteSubSectionNL_ss", "supportResourceTypeNL_ss", "supportTypeNL_ss", "ECOM_JSON_URL_s", "productNL_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionNL_facet", "siteSectionNL_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleNL_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionNL_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleNL_t", "descriptionNL_t", "siteSectionNL_ss", "siteSubSectionNL_ss", "supportResourceTypeNL_ss", "supportTypeNL_ss", "ECOM_JSON_URL_s", "productNL_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionNL_facet", "siteSectionNL_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1NL_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1NL_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1NL\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2NL_facet}productTaxonomyL2NL_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2NL_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1NL\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2NL_facet}productTaxonomyL2NL_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2NL_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2NL_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3NL_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3NL_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLNL THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNL_facetg_technologyNL_facet}technologyNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNL_facet}siteSectionNL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeNL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleNL_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionNL~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleNL_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionNL~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"NL\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-NL"
  }
}, {
  "id" : "ParkerDotComMain-NO",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionNO_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleNO_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionNO_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleNO_t", "descriptionNO_t", "siteSectionNO_ss", "siteSubSectionNO_ss", "supportResourceTypeNO_ss", "supportTypeNO_ss", "ECOM_JSON_URL_s", "productNO_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionNO_facet", "siteSectionNO_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleNO_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionNO_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleNO_t", "descriptionNO_t", "siteSectionNO_ss", "siteSubSectionNO_ss", "supportResourceTypeNO_ss", "supportTypeNO_ss", "ECOM_JSON_URL_s", "productNO_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionNO_facet", "siteSectionNO_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1NO_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1NO_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1NO\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2NO_facet}productTaxonomyL2NO_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2NO_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1NO\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2NO_facet}productTaxonomyL2NO_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2NO_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2NO_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3NO_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3NO_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLNO THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNO_facetg_technologyNO_facet}technologyNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionNO_facet}siteSectionNO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeNO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionNO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleNO_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionNO~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleNO_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionNO~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"NO\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-NO"
  }
}, {
  "id" : "MyParkerDotComMain-HU",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionHU_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleHU_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionHU_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleHU_t", "descriptionHU_t", "siteSectionHU_ss", "siteSubSectionHU_ss", "supportResourceTypeHU_ss", "supportTypeHU_ss", "ECOM_JSON_URL_s", "productHU_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionHU_facet", "siteSectionHU_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleHU_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionHU_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleHU_t", "descriptionHU_t", "siteSectionHU_ss", "siteSubSectionHU_ss", "supportResourceTypeHU_ss", "supportTypeHU_ss", "ECOM_JSON_URL_s", "productHU_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionHU_facet", "siteSectionHU_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1HU_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1HU_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1HU\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2HU_facet}productTaxonomyL2HU_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2HU_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1HU\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2HU_facet}productTaxonomyL2HU_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2HU_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2HU_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3HU_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3HU_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLHU THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeHU_facetg_technologyHU_facet}technologyHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleHU_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionHU~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleHU_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionHU~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"HU\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-HU"
  }
}, {
  "id" : "ParkerDotComMain-FI",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionFI_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleFI_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionFI_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleFI_t", "descriptionFI_t", "siteSectionFI_ss", "siteSubSectionFI_ss", "supportResourceTypeFI_ss", "supportTypeFI_ss", "ECOM_JSON_URL_s", "productFI_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionFI_facet", "siteSectionFI_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleFI_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionFI_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleFI_t", "descriptionFI_t", "siteSectionFI_ss", "siteSubSectionFI_ss", "supportResourceTypeFI_ss", "supportTypeFI_ss", "ECOM_JSON_URL_s", "productFI_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionFI_facet", "siteSectionFI_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1FI_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1FI_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1FI\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2FI_facet}productTaxonomyL2FI_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2FI_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1FI\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2FI_facet}productTaxonomyL2FI_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2FI_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2FI_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3FI_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3FI_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLFI THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFI_facetg_technologyFI_facet}technologyFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFI_facet}siteSectionFI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeFI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleFI_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionFI~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleFI_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionFI~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"FI\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-FI"
  }
}, {
  "id" : "ParkerDotComMain-RU",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionRU_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleRU_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionRU_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleRU_t", "descriptionRU_t", "siteSectionRU_ss", "siteSubSectionRU_ss", "supportResourceTypeRU_ss", "supportTypeRU_ss", "ECOM_JSON_URL_s", "productRU_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionRU_facet", "siteSectionRU_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleRU_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionRU_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleRU_t", "descriptionRU_t", "siteSectionRU_ss", "siteSubSectionRU_ss", "supportResourceTypeRU_ss", "supportTypeRU_ss", "ECOM_JSON_URL_s", "productRU_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionRU_facet", "siteSectionRU_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1RU_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1RU_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1RU\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2RU_facet}productTaxonomyL2RU_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2RU_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1RU\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2RU_facet}productTaxonomyL2RU_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2RU_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2RU_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3RU_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3RU_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLRU THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeRU_facetg_technologyRU_facet}technologyRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionRU_facet}siteSectionRU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeRU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionRU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleRU_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionRU~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleRU_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionRU~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"RU\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-RU"
  }
}, {
  "id" : "ParkerDotComMain-JP",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionJP_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleJP_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionJP_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleJP_t", "descriptionJP_t", "siteSectionJP_ss", "siteSubSectionJP_ss", "supportResourceTypeJP_ss", "supportTypeJP_ss", "ECOM_JSON_URL_s", "productJP_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionJP_facet", "siteSectionJP_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleJP_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionJP_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleJP_t", "descriptionJP_t", "siteSectionJP_ss", "siteSubSectionJP_ss", "supportResourceTypeJP_ss", "supportTypeJP_ss", "ECOM_JSON_URL_s", "productJP_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionJP_facet", "siteSectionJP_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1JP_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1JP_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1JP\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2JP_facet}productTaxonomyL2JP_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2JP_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1JP\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2JP_facet}productTaxonomyL2JP_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2JP_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2JP_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3JP_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3JP_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLJP THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeJP_facetg_technologyJP_facet}technologyJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionJP_facet}siteSectionJP_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeJP_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionJP_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleJP_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionJP~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleJP_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionJP~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"JP\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-JP"
  }
}, {
  "id" : "aaa",
  "stages" : [ {
    "type" : "set-params",
    "id" : "rgz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    }, {
      "key" : "expand",
      "value" : "true",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "rgz"
  }, {
    "type" : "facet",
    "id" : "bto",
    "fieldFacets" : [ {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivision_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "bto",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "fz",
    "params" : [ {
      "key" : "fq",
      "value" : "title_s:*",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "title_s~1^5",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Titles Are Required",
    "secretSourceStageId" : "fz"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-000",
    "rows" : 20,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "autosuggest_general_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_text",
      "boost" : 1.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "parkerDivision_ss",
      "boost" : 1.0
    } ],
    "returnFields" : [ "suggest_type_s", "title_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest All",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-000"
  }, {
    "type" : "search-fields",
    "id" : "gpp",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_general_text"
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest General",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'news-events' || request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "gpp"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-400",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Products",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-400"
  }, {
    "type" : "search-fields",
    "id" : "2bo",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_support_text",
      "boost" : 100.0
    }, {
      "field" : "autosuggest_support_config_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_cad_text",
      "boost" : 1.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "2bo"
  }, {
    "type" : "set-params",
    "id" : "vaq",
    "params" : [ {
      "key" : "bq",
      "value" : "siteSubSection_ss:Product Category^10",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Boost Product Category",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "vaq"
  }, {
    "type" : "set-params",
    "id" : "tru",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSection_ss:News and Events",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News & Events",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "tru"
  }, {
    "type" : "set-params",
    "id" : "o2t",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "o2t"
  }, {
    "type" : "set-params",
    "id" : "rrr",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter Events",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "rrr"
  }, {
    "type" : "set-params",
    "id" : "3l",
    "params" : [ {
      "key" : "tie",
      "value" : "0.99",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_category_text^10",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "urlKeyword_exactish^4",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_pseries_text^7",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_part_text^3",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "secretSourceStageId" : "3l"
  }, {
    "type" : "set-params",
    "id" : "fb",
    "params" : [ {
      "key" : "group",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "group.field",
      "value" : "suggest_type_s",
      "policy" : "append"
    }, {
      "key" : "group.limit",
      "value" : "6",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Suggest Grouping",
    "secretSourceStageId" : "fb"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$contains_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "3ze",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Rules: Process",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "3ze"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "solr-query",
    "id" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "aaa"
  }
}, {
  "id" : "ParkerDotComMain-IT",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionIT_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleIT_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionIT_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleIT_t", "descriptionIT_t", "siteSectionIT_ss", "siteSubSectionIT_ss", "supportResourceTypeIT_ss", "supportTypeIT_ss", "ECOM_JSON_URL_s", "productIT_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionIT_facet", "siteSectionIT_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleIT_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionIT_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleIT_t", "descriptionIT_t", "siteSectionIT_ss", "siteSubSectionIT_ss", "supportResourceTypeIT_ss", "supportTypeIT_ss", "ECOM_JSON_URL_s", "productIT_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionIT_facet", "siteSectionIT_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1IT_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1IT_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1IT\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2IT_facet}productTaxonomyL2IT_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2IT_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1IT\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2IT_facet}productTaxonomyL2IT_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2IT_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2IT_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3IT_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3IT_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLIT THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeIT_facetg_technologyIT_facet}technologyIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionIT_facet}siteSectionIT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeIT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionIT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleIT_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionIT~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleIT_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionIT~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"IT\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-IT"
  }
}, {
  "id" : "_system",
  "stages" : [ {
    "type" : "solr-query",
    "id" : "11a49665-0248-47f7-8866-164d8c98cb25",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "11a49665-0248-47f7-8866-164d8c98cb25"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "_system"
  }
}, {
  "id" : "ParkerDotComMain-ZH",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionZH_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleZH_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionZH_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleZH_t", "descriptionZH_t", "siteSectionZH_ss", "siteSubSectionZH_ss", "supportResourceTypeZH_ss", "supportTypeZH_ss", "ECOM_JSON_URL_s", "productZH_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionZH_facet", "siteSectionZH_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleZH_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionZH_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleZH_t", "descriptionZH_t", "siteSectionZH_ss", "siteSubSectionZH_ss", "supportResourceTypeZH_ss", "supportTypeZH_ss", "ECOM_JSON_URL_s", "productZH_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionZH_facet", "siteSectionZH_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1ZH_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1ZH_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1ZH\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2ZH_facet}productTaxonomyL2ZH_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2ZH_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1ZH\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2ZH_facet}productTaxonomyL2ZH_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2ZH_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2ZH_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3ZH_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3ZH_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLZH THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeZH_facetg_technologyZH_facet}technologyZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionZH_facet}siteSectionZH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeZH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionZH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleZH_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionZH~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleZH_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionZH~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"ZH\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-ZH"
  }
}, {
  "id" : "ParkerDotComMain-ES",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionES_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleES_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionES_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleES_t", "descriptionES_t", "siteSectionES_ss", "siteSubSectionES_ss", "supportResourceTypeES_ss", "supportTypeES_ss", "ECOM_JSON_URL_s", "productES_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionES_facet", "siteSectionES_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleES_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionES_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleES_t", "descriptionES_t", "siteSectionES_ss", "siteSubSectionES_ss", "supportResourceTypeES_ss", "supportTypeES_ss", "ECOM_JSON_URL_s", "productES_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionES_facet", "siteSectionES_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1ES_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1ES_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1ES\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2ES_facet}productTaxonomyL2ES_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2ES_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1ES\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2ES_facet}productTaxonomyL2ES_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2ES_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2ES_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3ES_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3ES_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLES THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeES_facetg_technologyES_facet}technologyES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionES_facet}siteSectionES_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeES_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionES_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleES_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionES~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleES_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionES~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"ES\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-ES"
  }
}, {
  "id" : "MyParkerDotComMain-PL",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionPL_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titlePL_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionPL_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titlePL_t", "descriptionPL_t", "siteSectionPL_ss", "siteSubSectionPL_ss", "supportResourceTypePL_ss", "supportTypePL_ss", "ECOM_JSON_URL_s", "productPL_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionPL_facet", "siteSectionPL_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titlePL_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionPL_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titlePL_t", "descriptionPL_t", "siteSectionPL_ss", "siteSubSectionPL_ss", "supportResourceTypePL_ss", "supportTypePL_ss", "ECOM_JSON_URL_s", "productPL_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionPL_facet", "siteSectionPL_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1PL_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1PL_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1PL\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2PL_facet}productTaxonomyL2PL_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2PL_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1PL\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2PL_facet}productTaxonomyL2PL_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2PL_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2PL_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3PL_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3PL_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLPL THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePL_facetg_technologyPL_facet}technologyPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titlePL_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionPL~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titlePL_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionPL~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"PL\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-PL"
  }
}, {
  "id" : "MyParkerDotComMain-TR",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionTR_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTR_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTR_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTR_t", "descriptionTR_t", "siteSectionTR_ss", "siteSubSectionTR_ss", "supportResourceTypeTR_ss", "supportTypeTR_ss", "ECOM_JSON_URL_s", "productTR_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTR_facet", "siteSectionTR_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTR_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTR_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTR_t", "descriptionTR_t", "siteSectionTR_ss", "siteSubSectionTR_ss", "supportResourceTypeTR_ss", "supportTypeTR_ss", "ECOM_JSON_URL_s", "productTR_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTR_facet", "siteSectionTR_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1TR_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1TR_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TR\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TR_facet}productTaxonomyL2TR_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2TR_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TR\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TR_facet}productTaxonomyL2TR_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2TR_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2TR_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TR_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TR_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLTR THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTR_facetg_technologyTR_facet}technologyTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTR_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTR~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTR_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTR~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"TR\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-TR"
  }
}, {
  "id" : "flyoutlookup",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "355e96a5-eff8-48b2-8d20-8dfa745376ea",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : true,
    "secretSourceStageId" : "355e96a5-eff8-48b2-8d20-8dfa745376ea"
  }, {
    "type" : "search-fields",
    "id" : "8420dde1-8a1c-4507-a67d-f7f930bc8ef7",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : true,
    "secretSourceStageId" : "8420dde1-8a1c-4507-a67d-f7f930bc8ef7"
  }, {
    "type" : "facet",
    "id" : "5142f3ba-7951-4ca1-83bc-85b75999cb4f",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : true,
    "secretSourceStageId" : "5142f3ba-7951-4ca1-83bc-85b75999cb4f"
  }, {
    "type" : "solr-query",
    "id" : "91bad26e-acb2-4c3f-adfe-dc346ed2aa12",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "91bad26e-acb2-4c3f-adfe-dc346ed2aa12"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "flyoutlookup"
  }
}, {
  "id" : "ParkerDotComMain-VI",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionVI_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleVI_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionVI_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleVI_t", "descriptionVI_t", "siteSectionVI_ss", "siteSubSectionVI_ss", "supportResourceTypeVI_ss", "supportTypeVI_ss", "ECOM_JSON_URL_s", "productVI_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionVI_facet", "siteSectionVI_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleVI_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionVI_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleVI_t", "descriptionVI_t", "siteSectionVI_ss", "siteSubSectionVI_ss", "supportResourceTypeVI_ss", "supportTypeVI_ss", "ECOM_JSON_URL_s", "productVI_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionVI_facet", "siteSectionVI_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1VI_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1VI_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1VI\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2VI_facet}productTaxonomyL2VI_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2VI_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1VI\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2VI_facet}productTaxonomyL2VI_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2VI_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2VI_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3VI_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3VI_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLVI THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeVI_facetg_technologyVI_facet}technologyVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionVI_facet}siteSectionVI_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeVI_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionVI_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleVI_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionVI~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleVI_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionVI~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"VI\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-VI"
  }
}, {
  "id" : "ParkerDotComMain-FacetTesting",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "645e3d86-8ad0-4999-bcf9-b1a217ef53f8",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "645e3d86-8ad0-4999-bcf9-b1a217ef53f8",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "search-fields",
    "id" : "636eb1a4-a690-485e-8993-14d06dcb8012",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "636eb1a4-a690-485e-8993-14d06dcb8012",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "facet",
    "id" : "613cedbb-8da8-472d-b506-fba21879023b",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "613cedbb-8da8-472d-b506-fba21879023b",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "59j",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSection_ss}siteSubSection_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_productTaxonomyL1_s}productTaxonomyL1_s",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "secretSourceStageId" : "59j"
  }, {
    "type" : "solr-query",
    "id" : "1795b7cc-c1a6-45b7-8bcb-c30c079a7515",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "1795b7cc-c1a6-45b7-8bcb-c30c079a7515",
    "properties" : {
      "autoCreated" : true
    }
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-FacetTesting"
  }
}, {
  "id" : "ParkerDotComSuggest-Flyout",
  "stages" : [ {
    "type" : "set-params",
    "id" : "omj",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "omj"
  }, {
    "type" : "javascript-query",
    "id" : "ete",
    "script" : "\n\n\tvar sflyout = request.getParam(\"sflyout\");\n\tvar processid = request.getParam(\"suggestId\");\n\tvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\n\tvar facetParamsLength = facetParams.length;  // determine length of fqs\n\tvar flyoutType;\n\tvar suggestId;\n\tvar groupField;\n\tvar groupLimit;\n\tvar fqString;\n\tvar fieldList;\n\tvar language = \"EN\";\n\tvar country = \"\";\n\tvar division = \"\";\n\tvar sortingType=\"\";\n\n\n\t\t\t\tvar HttpURLConnection = java.net.HttpURLConnection;\n\t\t\t\tvar URL = java.net.URL;\n\t\t\t\tvar InputStreamReader = java.io.InputStreamReader;\n\t\t\t\tvar BufferedReader = java.io.BufferedReader;\n\t\t\t\tvar e = java.lang.Exception;\n\t\t\t\tvar url = \"\";\n\n\n\t//logger.info(\"zzz flyout type is: \" + sflyout);\n\t//logger.info(\"zzz category is: \" + processid);\n\t//logger.info(\"zzzz facet params: \" + facetParams);\n\t//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\n\n\n\tif (facetParamsLength) { // if there are facets, process them\n\t\tfor each (var fq in facetParams) {\n\t \n\t\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\t\tvar fqArray;\n\t  \n\t\t\tfqArray = fq.split(\":\");\n\t  \n\t\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n\t  \n\t\t\tif(fqArray[0]==\"languageCode_ss\"){\n\t\t\t\n\t\t\t\tlanguage = fqArray[1];\n\t\t\t\t//logger.info(\"zzz language is: \" + language);\n\t\t\t}\n\t\t\telse if(fqArray[0]==\"countryId_ss\"){\n\t\t\t\tcountry = fqArray[1];\n\t\t\t}\n\t\t\telse if(fqArray[0]==\"parkerDivision_ss\"){\n\t\t\t\tdivision = fqArray[1];\n\t\t\t\t//logger.info(\"zzz Division: \" + division);\n\t\t\t}\n\t  \n\t\t}\n\t}\n\telse // there are no fqs so this is an inital request, set default filtering for Level 0\n\t{\n\t  //logger.info(\"zzz there are no FQs\");\n\n\t  \n\t}\n\n\n\n\n\t// determine the Suggestion Flyout Type\n\t// Possible values are - \"category-card\", \"category-suggestion\", \"series-suggestion\", \"part\"\n\ttry{\n\tflyoutType = sflyout[0];\n\t//logger.info(\"zzz flyoutType is now: \" + flyoutType);\n\t}\n\tcatch (exception)\n\t{\n\t//  logger.info(\"zzz there is no flyout type! \" + exception);\t\n\t  flyoutType = \"category-card\";\n\t}\n\n\n\t// for testing purposes - hard code the suggestId\n\t//suggestId = \"166612\";\n\n\t// production code for extracting the id value to handle\n\n\tsuggestId = \"0\";\n\n\n\n\ttry {\n\t  suggestId = processid[0];\n\t}\n\n\tcatch (exception)\n\t{\n\t\tsuggestId = \"16612\";\n\t  //logger.info(\"zzz there is no category! \" + exception);\n\t}\n\n\n\t  \n\t// based upon type of suggestion flyout, handle the data\n\n\tswitch(flyoutType) {\n\t\tcase \"category-card\":\n\t\t\t//logger.info(\"zzz processing CATEGORY CARD suggestion type flyout\");\n\t\t\tfqString = \"((categoryId_l:\" + suggestId + \" AND suggest_type_s:category))\";\n\t\t\tgroupField = \"suggest_type_s\";\n\t\t\tgroupLimit = \"1\";\n\t\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,ECOM_JSON_URL_s,imageURL_s,productType_s,productSeriesId_l\";\n\n\t\t\t//logger.info(\"zzz fqString is: \" + fqString);\n\t\t\t\n\t\t\tbreak;\n\t\tcase \"category-suggestion\":\n\t\t\t//logger.info(\"zzz processing regular category suggestion type flyout\");\n\t\t\tfqString = \"((categoryId_l:\" + suggestId + \" AND suggest_type_s:category) OR (productType_ss:\\\"Product Series\\\" AND  categoryId_l:\" + suggestId + \"))\";\n\t\t\tgroupField = \"suggest_type_s\";\n\t\t\tgroupLimit = \"6\";\n\t\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,ECOM_JSON_URL_s,imageURL_s,productType_s,productSeriesId_l\";\n\t\t\tsortingType=\"click_count_i desc\";\n\t\t\t//logger.info(\"zzz fqString is: \" + fqString);\n\t\t\t\n\t\t\t\n\t\t\t/* At this point, must execute the search directly to get a count back from the server - need to get a count of items that are \"category\" and \"product series\"\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t*/\n\t\t\t\n\t\t\tif(country!=null && country!=\"\"){\n\t\t\t\tcountrydivision = \"countryId_ss:\" + country;\n\t\t\t\t//logger.info(\"zzz setting countrydivision: \" + countrydivision);\n\t\t\t}\n\t\t\telse if(division!=null && division!=\"\"){\n\t\t\t\tcountrydivision = \"parkerDivision_ss:\" + division;\n\t\t\t\t//logger.info(\"zzz setting countrydivision: \" + countrydivision);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//logger.info(\"zzz no country or division found\");\n\t\t\t\tcountrydivision = \"countryId_ss:687PDC\";\n\t\t\t}\n\n\t\t\tvar catFQString = \"((\" + countrydivision + \")%20AND%20(languageCode_ss:\" + language + \")%20AND%20((categoryId_l:\" + suggestId + \"%20AND%20suggest_type_s:category)%20OR%20(productType_ss:%22Product%20Series%22%20AND%20categoryId_l:\" + suggestId +\")))\"; \n\t\t\t\n\t\t\ttry {\n\t\t\t\t\tvar url = new URL((\"http://localhost:8764/api/apollo/query-pipelines/flyoutlookup/collections/ParkerDotComMainMaster/select?echoParams=all&wt=json&json.nl=arrarr&sort&start=0&q=*:*&fq=\" + catFQString + \"&fl=isL1_s,isL2_s,isL3_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,productType_s,title_s,categoryId_l&debug=false&rows=50\"));\n\t\t  \n\t\t  \n\t\t  \n\t\t\t\t\t//logger.info(\"zzz category-suggestion lookup URL: \" + url);\n\t\t\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\t\t\tc = url.openConnection();\n\t\t\t\t\tc.setRequestProperty(\"Authorization\", \"Basic YWRtaW46UGFya2VyMTIz\");\n\t\t\t\t\t//c.setRequestProperty(\"Authorization\", \"Basic zzzzzzz\");\n\t\t\t\t\tc.connect();\n\t\t\t\t\tvar status = c.getResponseCode();\n\t\t\t\t\t//logger.info(\"zzz *** category-suggestion L1 Query Status: \" + status);\n\t\t\t\n\t\t\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\t\t\t var reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\t\t\t var response = JSON.parse(reader.readLine());\n\t\t\t\t\t\t var num = response.response.numFound;\n\n\t\t\t\t\t//\tlogger.info(\"zzz category-suggestion results Found: \" + num);\n\n\t\t\t\t\t\tif (num==1){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tpsquery = \"\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// put all document titles from the query into an array and set as a multivalued string\n\t\t\t\t\t\t\tvar resp = response.response.docs;\n\t\t\t\t\t\t\t//logger.info(\"zzz Num responses of category-suggestions: \" + resp.length);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (resp[0].isL1_s==\"yes\"){\n\t\t\t\t\t\t\t\t\t//logger.info(\"zzz TaxonomyL1 value is: \" + resp[0].productTaxonomyL1_s);\n\t\t\t\t\t\t\t\t\tpsquery = \"(productType_ss:\\\"Product Series\\\" AND productTaxonomyL1\" + language + \"_s:\\\"\" + resp[0].productTaxonomyL1_s + \"\\\")\";\n\t\t\t\t\t\t\t\t\tsortingType=\"click_count_i desc\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telse if (resp[0].isL2_s==\"yes\"){\n\t\t\t\t\t\t\t\t\t//logger.info(\"zzz TaxonomyL2 value is: \" + resp[0].productTaxonomyL2_s);\n\t\t\t\t\t\t\t\t\tpsquery = \"(productType_ss:\\\"Product Series\\\" AND productTaxonomyL2\" + language + \"_s:\\\"\" + resp[0].productTaxonomyL2_s + \"\\\")\";\n\t\t\t\t\t\t\t\t\tsortingType=\"click_count_i desc\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (resp[0].isL3_s==\"yes\"){\n\t\t\t\t\t\t\t\t\t//logger.info(\"zzz TaxonomyL3 value is: \" + resp[0].productTaxonomyL3_s);\n\t\t\t\t\t\t\t\t\tpsquery = \"(productType_ss:\\\"Product Series\\\" AND productTaxonomyL3\" + language + \"_s:\\\"\" + resp[0].productTaxonomyL3_s + \"\\\")\";\n\t\t\t\t\t\t\t\t\tsortingType=\"click_count_i desc\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpsquery = \"(productType_ss:\\\"Product Series\\\" AND productTaxonomyL3\" + language + \"_s:\\\"\" + resp[0].productTaxonomyL3_s + \"\\\")\";\n\t\t\t\t\t\t\t\t\tsortingType=\"click_count_i desc\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfqString = \"((categoryId_l:\" + suggestId + \" AND suggest_type_s:category) OR \" + psquery + \")\";\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//\tlogger.info(\"zzz fqSTring Search PS: \" + fqString);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlogger.info(\"zzz AQS category-suggestion too many documents found, skipping this stage: \" + num2);\n\t\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tlogger.info(\"zzz AQS category-suggestion something went wrong during the search query\");\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t} catch (e) {\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t\t}\n\t\t\t  \n\t\t\t  \n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tbreak;\n\t\tcase \"series-suggestion\":\n\t\t\t//logger.info(\"zzz processing product series suggestion type flyout\");\n\t\t\tfqString = \"((productSeriesId_l:\" + suggestId + \" AND productType_ss:\\\"Product Series\\\") OR (productType_ss:\\\"Part\\\" AND  productSeriesId_l:\" + suggestId + \"))\";\n\t\t\tgroupField = \"productType_s\";\n\t\t\tgroupLimit = \"4\";\n\t\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,ECOM_JSON_URL_s,imageURL_s,productType_s,productSeriesId_l,audience_ss,customerIds_ss\";\n\t\t\tsortingType=\"click_count_i desc\";\n\t\t\n\t\t\t//logger.info(\"zzz fqString is: \" + fqString);\n\t\t\t\n\t\t\tbreak;\n\t\tcase \"part-suggestion\":\n\t\t\t//logger.info(\"zzz processing part type flyout\");\n\t\t\tfqString = \"((parkerPartNumber_s:\\\"\" + suggestId + \"\\\" AND productType_ss:\\\"Part\\\"))\";\n\t\t\tgroupField = \"productType_s\";\n\t\t\tgroupLimit = \"1\";\n\t\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,ECOM_JSON_URL_s,parkerPartNumber_s,imageURL_s,productType_s,productSeriesId_l,audience_ss,customerIds_ss\";\n\t\t\tsortingType=\"click_count_i desc\";\n\t\t\n\t\t\t//logger.info(\"zzz fqString is: \" + fqString);\n\t\t\t\n\t\t\tbreak;\t\t\n\t\tdefault:\n\t\t\t//logger.info(\"zzz CASE FALLTHROUGH flyout type is set to: \" + flyoutType);\n\t\t\tgroupField=\"suggest_type_s\";\n\t\t\tgroupLimit=\"1\";\n\t\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,ECOM_JSON_URL_s,imageURL_s,productType_s,productSeriesId_l,audience_ss,customerIds_ss\";\n\t}\n\n\n\t//logger.info(\"zzz setting group by field to: \" + groupField);\n\t//logger.info(\"zzz setting group limit to: \" + groupLimit);\n\n\trequest.removeParam(\"q\");\n\trequest.addParam(\"q\",\"*:*\");\n\trequest.addParam(\"fq\",fqString);\n\trequest.addParam(\"group\",\"true\");\n\trequest.addParam(\"group.field\",groupField);\n\trequest.addParam(\"group.limit\",groupLimit);\n\trequest.addParam(\"sort\",sortingType);\n\trequest.addParam(\"fl\",fieldList);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query",
    "secretSourceStageId" : "ete"
  }, {
    "type" : "javascript-query",
    "id" : "63b",
    "script" : "function findOring(q){\n  \n  var result = false;\n  \n  logger.info(\"zzz incoming query is: \" + q);\n  \n  var location = q.indexOf(\"o r\");\n  logger.info(\"zzz location is \"+  location); \n  \n  if (q.indexOf(\"o r\")!= -1){ \n    logger.info(\"zzz found an o-ring\");\n    result=true; \n  }\n  else\n  {\n    logger.info(\"zzz did not find an o-ring\");\n  }\n   \n\n  \n  return result;\n}\n\nvar query = request.getFirstParam(\"q\")\nlogger.info(\"zzz suggest query is: \" + query);\n\nif (findOring(query)){\n  logger.info(\"zzz found an o-ring for sure\");\n  var changedQuery = query.replace(/o r/,\"o-r\");\n logger.info(\"zzz new query is \" + changedQuery); \n  \n  request.removeParam(\"q\");\nrequest.addParam(\"q\",changedQuery);\n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Handle Query",
    "secretSourceStageId" : "63b"
  }, {
    "type" : "set-params",
    "id" : "mrt",
    "params" : [ {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Boost by Taxonomy",
    "secretSourceStageId" : "mrt"
  }, {
    "type" : "set-params",
    "id" : "7ar",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7ar"
  }, {
    "type" : "facet",
    "id" : "bto",
    "fieldFacets" : [ {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivision_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "bto",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "fz",
    "params" : [ {
      "key" : "fq",
      "value" : "title_s:*",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "title_s~1^5",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Titles Are Required",
    "secretSourceStageId" : "fz"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-000",
    "rows" : 20,
    "start" : 0,
    "sort" : "",
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 5.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 4.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 2.0
    }, {
      "field" : "autosuggest_general_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_text",
      "boost" : 1.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "parkerDivision_ss",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "id", "countryCode_ss", "storeId_l", "score", "isL1_s", "isL2_s", "isL3_s", "urlKeyword_exact" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest All",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-000"
  }, {
    "type" : "search-fields",
    "id" : "gpp",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_general_text"
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest General",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'news-events' || request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "gpp"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-400",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Products",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-400"
  }, {
    "type" : "search-fields",
    "id" : "2bo",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_support_text",
      "boost" : 100.0
    }, {
      "field" : "autosuggest_support_config_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_cad_text",
      "boost" : 1.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "2bo"
  }, {
    "type" : "set-params",
    "id" : "tru",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSection_ss:News and Events",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News & Events",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "tru"
  }, {
    "type" : "set-params",
    "id" : "o2t",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "o2t"
  }, {
    "type" : "set-params",
    "id" : "rrr",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter Events",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "rrr"
  }, {
    "type" : "set-params",
    "id" : "3l",
    "params" : [ {
      "key" : "tie",
      "value" : "0.99",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_category_text^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "urlKeyword_exactish^4",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_pseries_text^2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_part_text^1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Relevancy Adjustments",
    "secretSourceStageId" : "3l"
  }, {
    "type" : "set-params",
    "id" : "fb",
    "params" : [ {
      "key" : "group",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "group.field",
      "value" : "suggest_type_s",
      "policy" : "append"
    }, {
      "key" : "group.limit",
      "value" : "6",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Suggest Grouping",
    "secretSourceStageId" : "fb"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$contains_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "solr-query",
    "id" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComSuggest-Flyout"
  }
}, {
  "id" : "MyParkerDotComMain-DE",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionDE_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleDE_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionDE_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleDE_t", "descriptionDE_t", "siteSectionDE_ss", "siteSubSectionDE_ss", "supportResourceTypeDE_ss", "supportTypeDE_ss", "ECOM_JSON_URL_s", "productDE_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionDE_facet", "siteSectionDE_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleDE_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionDE_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleDE_t", "descriptionDE_t", "siteSectionDE_ss", "siteSubSectionDE_ss", "supportResourceTypeDE_ss", "supportTypeDE_ss", "ECOM_JSON_URL_s", "productDE_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionDE_facet", "siteSectionDE_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1DE_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1DE_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1DE\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2DE_facet}productTaxonomyL2DE_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2DE_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1DE\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2DE_facet}productTaxonomyL2DE_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2DE_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2DE_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3DE_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3DE_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLDE THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDE_facetg_technologyDE_facet}technologyDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleDE_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionDE~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleDE_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionDE~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"DE\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-DE"
  }
}, {
  "id" : "MyParkerDotComMain-PT",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionPT_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titlePT_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionPT_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titlePT_t", "descriptionPT_t", "siteSectionPT_ss", "siteSubSectionPT_ss", "supportResourceTypePT_ss", "supportTypePT_ss", "ECOM_JSON_URL_s", "productPT_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionPT_facet", "siteSectionPT_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titlePT_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionPT_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titlePT_t", "descriptionPT_t", "siteSectionPT_ss", "siteSubSectionPT_ss", "supportResourceTypePT_ss", "supportTypePT_ss", "ECOM_JSON_URL_s", "productPT_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionPT_facet", "siteSectionPT_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1PT_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1PT_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1PT\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2PT_facet}productTaxonomyL2PT_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2PT_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1PT\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2PT_facet}productTaxonomyL2PT_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2PT_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2PT_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3PT_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3PT_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLPT THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePT_facetg_technologyPT_facet}technologyPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titlePT_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionPT~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titlePT_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionPT~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"PT\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-PT"
  }
}, {
  "id" : "MyParkerDotComMain-TW",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionTW_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTW_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTW_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTW_t", "descriptionTW_t", "siteSectionTW_ss", "siteSubSectionTW_ss", "supportResourceTypeTW_ss", "supportTypeTW_ss", "ECOM_JSON_URL_s", "productTW_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTW_facet", "siteSectionTW_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTW_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTW_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTW_t", "descriptionTW_t", "siteSectionTW_ss", "siteSubSectionTW_ss", "supportResourceTypeTW_ss", "supportTypeTW_ss", "ECOM_JSON_URL_s", "productTW_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTW_facet", "siteSectionTW_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1TW_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1TW_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TW\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TW_facet}productTaxonomyL2TW_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2TW_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TW\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TW_facet}productTaxonomyL2TW_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2TW_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2TW_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TW_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TW_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLTW THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTW_facetg_technologyTW_facet}technologyTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTW_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTW~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTW_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTW~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"TW\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-TW"
  }
}, {
  "id" : "related-items",
  "stages" : [ {
    "type" : "more-like-this",
    "id" : "37062f92-02c5-4bb2-a578-1b1d137723d3",
    "moreLikeThisFields" : [ ],
    "useQueryParser" : true,
    "mindf" : 2,
    "maxdf" : 10000,
    "minwl" : 3,
    "docId" : "id",
    "type" : "more-like-this",
    "skip" : false,
    "secretSourceStageId" : "37062f92-02c5-4bb2-a578-1b1d137723d3"
  }, {
    "type" : "solr-query",
    "id" : "ae3ad3e7-a4f6-4b39-aa6e-241f6384c53b",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "ae3ad3e7-a4f6-4b39-aa6e-241f6384c53b"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "related-items"
  }
}, {
  "id" : "ParkerDotComMain-FacetHash",
  "stages" : [ {
    "type" : "javascript-query",
    "id" : "itd",
    "script" : "/* Last modified: 2018-05-15\n   Last modified by:  Terry Chambers / Onix\n   Change summary:\n   First version\n*/\n// HASHING FUNCTION\nfunction hashTheFacet(facetToProcess) {\n    var facetValues = [];\n    var newHashedFacetValue = [];\n    \n  var temp = facetToProcess.toString().replace(/\\[|\\]/g,'').trim();\n  var replaced = temp.replace(/\\[|\\]/g,'');\n  //logger.info(\"zzz REPLACED: \" + replaced);\n  \n   \n  //logger.info(\"zzz typeof: \" + typeof temp);\n  \n    // get the values of the facet to be processed\n    facetValues = replaced.split(\",\");\n    //logger.info(\"zzz: hashTheFacet(\" + facetToProcess + \")\");\n    // loop through the facet values and create hashes for them\n    facetValues.forEach(function (f) {\n\t\tif (f  != null){\n\t\t\tif (f.length!==0){\n             // logger.info(\"zzz to process: \" + f.trim() + \"zzzz\");\n\t\t\t\tvar newHashedFacet = f.trim().hashCode();\t\t\n\t\t\t\tnewHashedFacetValue.push(\"p\" + newHashedFacet + \"$$$\" + f.trim());\n              //  logger.info(\"zzz processed: \" + \"p\" + newHashedFacet + \"$$$\" + f.trim());\n\t\t\t\t\n\t\t\t}\n\t\t}\n    });\n    // return the hashed items\n  //logger.info(\"zzz returning from function\");\n    return [newHashedFacetValue];\n}\n\n\n\n// QUERY PIPELINE STARTS ***********\n\n//logger.info(\"zzz: Starting Facet Hashing pipeline\");\n//var req = request.getParams();\nvar facets = request.getParam('facetTrans');\n//var query = request.getFirstParam('q');\n//logger.info(\"zzz QUERY: \" + query);\n//var fqs = request.getParam('fq');\n//logger.info(\"zzz fqs: \" + fqs);\n\n\n\tvar hashedFacets = [];\n\n\t//logger.info(\"zzz: Calling Hashing Function\");\n\thashedFacets = hashTheFacet(facets);\n\n\t//logger.info(\"zzz: Returning Hashing Functions\");\n\nvar finalFacets = hashedFacets.toString().split(\",\");\n\nfor each(var hash in finalFacets){\n // logger.info(\"zzz processing output ... \" + hash);\n  request.addParam(\"hashes\",hash);\n}\n\n\t\n\n\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Facet Hashing (JS)",
    "secretSourceStageId" : "itd"
  }, {
    "type" : "recommendation",
    "id" : "49a861eb-949d-4d07-bfe8-2eb09cfc13e4",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : true,
    "secretSourceStageId" : "49a861eb-949d-4d07-bfe8-2eb09cfc13e4"
  }, {
    "type" : "search-fields",
    "id" : "a51310ca-678f-4f92-9c3a-2f59ef9faf44",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : true,
    "secretSourceStageId" : "a51310ca-678f-4f92-9c3a-2f59ef9faf44"
  }, {
    "type" : "facet",
    "id" : "8733367b-5792-42e2-a7e8-1b4234441249",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : true,
    "secretSourceStageId" : "8733367b-5792-42e2-a7e8-1b4234441249"
  }, {
    "type" : "solr-query",
    "id" : "9efedfd2-ecc8-4e5c-b3f3-5368c1d28f7c",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "9efedfd2-ecc8-4e5c-b3f3-5368c1d28f7c"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-FacetHash"
  }
}, {
  "id" : "default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "6905f932-e177-454c-9ad6-5144f63c408a",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "6905f932-e177-454c-9ad6-5144f63c408a"
  }, {
    "type" : "search-fields",
    "id" : "d361003d-e4bb-42ef-be0c-80f1ba48d6c4",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "d361003d-e4bb-42ef-be0c-80f1ba48d6c4"
  }, {
    "type" : "facet",
    "id" : "50777dcd-412e-4a9e-9163-f016eab30e2f",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "50777dcd-412e-4a9e-9163-f016eab30e2f"
  }, {
    "type" : "solr-query",
    "id" : "02395f9d-8cda-4c3b-90c2-29af28fc437f",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "02395f9d-8cda-4c3b-90c2-29af28fc437f"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "default"
  }
}, {
  "id" : "ParkerDotComMain_signals_aggr-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "c3964c3a-25ce-48ae-8163-ece6571629de",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "c3964c3a-25ce-48ae-8163-ece6571629de"
  }, {
    "type" : "search-fields",
    "id" : "f295306f-d4d8-4052-ab1a-eef38e4ea9d6",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "f295306f-d4d8-4052-ab1a-eef38e4ea9d6"
  }, {
    "type" : "facet",
    "id" : "6c76938a-1d2d-4c58-9d24-908764527888",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "6c76938a-1d2d-4c58-9d24-908764527888"
  }, {
    "type" : "solr-query",
    "id" : "85903087-69bb-4d29-bd67-43aa55a02187",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "85903087-69bb-4d29-bd67-43aa55a02187"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain_signals_aggr-default"
  }
}, {
  "id" : "ParkerPTS-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "e240d911-9b92-4ef6-81c4-e50205268a7a",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "e240d911-9b92-4ef6-81c4-e50205268a7a"
  }, {
    "type" : "search-fields",
    "id" : "66809b1c-43db-47e6-ab77-7baea4d9e19e",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "66809b1c-43db-47e6-ab77-7baea4d9e19e"
  }, {
    "type" : "facet",
    "id" : "180070df-0cac-4fb3-92c2-26e04dfef522",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "180070df-0cac-4fb3-92c2-26e04dfef522"
  }, {
    "type" : "solr-query",
    "id" : "e86acad5-5114-408e-9280-6b7fa35bdfc2",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "e86acad5-5114-408e-9280-6b7fa35bdfc2"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerPTS-default"
  }
}, {
  "id" : "MyParkerDotComSuggest-Flyout",
  "stages" : [ {
    "type" : "javascript-query",
    "id" : "6b",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n  //logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:(\\\"\" + formatPipe(authID) + \"\\\")) OR (audience_ss:public AND (siteSection_ss:Support OR productType_ss:\\\"Product Category\\\"))\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR (audience_ss:public AND (siteSection_ss:Support OR productType_ss:\\\"Product Category\\\"))\";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:(\\\"\" + formatPipe(authID) + \"\\\")) OR (audience_ss:public AND (siteSection_ss:Support OR productType_ss:\\\"Product Category\\\"))\";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  logger.info(\"zzz adding initial fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "6b"
  }, {
    "type" : "set-params",
    "id" : "9ee",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-parts-support",
    "secretSourceStageId" : "9ee"
  }, {
    "type" : "javascript-query",
    "id" : "ete",
    "script" : "var sflyout = request.getParam(\"sflyout\");\nvar processid = request.getParam(\"suggestId\");\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar flyoutType;\nvar suggestId;\nvar groupField;\nvar groupLimit;\nvar fqString;\nvar fieldList;\nvar language = \"EN\";\n\nlogger.info(\"zzz flyout type is: \" + sflyout);\nlogger.info(\"zzz category is: \" + processid);\nlogger.info(\"zzzz facet params: \" + facetParams);\nlogger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\n\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n \n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n\t\tif(fqArray[0]==\"languageCode_ss\"){\n\t\t\n\t\t\tlanguage = fqArray[1];\n\t\t\t//logger.info(\"zzz language is: \" + language);\n\t\t}\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  //logger.info(\"zzz there are no FQs\");\n\n  \n}\n\n\n\n\n// determine the Suggestion Flyout Type\n// Possible values are - \"category-card\", \"category-suggestion\", \"series-suggestion\", \"part\"\ntry{\nflyoutType = sflyout[0];\nlogger.info(\"zzz flyoutType is now: \" + flyoutType);\n}\ncatch (exception)\n{\n  logger.info(\"zzz there is no flyout type! \" + exception);\t\n  flyoutType = \"category-card\";\n}\n\n\n// for testing purposes - hard code the suggestId\n//suggestId = \"166612\";\n\n// production code for extracting the id value to handle\n\nsuggestId = \"0\";\n\n\n\ntry {\n  suggestId = processid[0];\n}\n\ncatch (exception)\n{\n\tsuggestId = \"16612\";\n  logger.info(\"zzz there is no category! \" + exception);\n}\n\n\n  \n// based upon type of suggestion flyout, handle the data\n\nswitch(flyoutType) {\n    case \"category-card\":\n\t\tlogger.info(\"zzz processing CATEGORY CARD suggestion type flyout\");\n\t\tfqString = \"((categoryId_l:\" + suggestId + \" AND suggest_type_s:category))\";\n\t\tgroupField = \"suggest_type_s\";\n\t\tgroupLimit = \"1\";\n\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,customerPartCount_ss,ECOM_JSON_URL_s,imageURL_s,productType_s,productSeriesId_l\";\n\n\tlogger.info(\"zzz fqString is: \" + fqString);\n\t\t\n        break;\n    case \"category-suggestion\":\n\t\tlogger.info(\"zzz processing regular category suggestion type flyout\");\n\t\tfqString = \"((categoryId_l:\" + suggestId + \" AND suggest_type_s:category) OR (productType_ss:\\\"Product Series\\\" AND  categoryId_l:\" + suggestId + \"))\";\n\t\tgroupField = \"suggest_type_s\";\n\t\tgroupLimit = \"6\";\n\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,customerPartCount_ss,ECOM_JSON_URL_s,imageURL_s,productType_s,productSeriesId_l\";\n\t\n\t\tlogger.info(\"zzz fqString is: \" + fqString);\n\t\t\n        break;\n\tcase \"series-suggestion\":\n\t\tlogger.info(\"zzz processing product series suggestion type flyout\");\n\t\tfqString = \"((productSeriesId_l:\" + suggestId + \" AND productType_ss:\\\"Product Series\\\") OR (productType_ss:\\\"Part\\\" AND  productSeriesId_l:\" + suggestId + \"))\";\n\t\tgroupField = \"productType_s\";\n\t\tgroupLimit = \"4\";\n\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,customerPartCount_ss,ECOM_JSON_URL_s,imageURL_s,productType_s,productSeriesId_l\";\n\t\n\t\tlogger.info(\"zzz fqString is: \" + fqString);\n\t\t\n\t\tbreak;\n    case \"part-suggestion\":\n\t\tlogger.info(\"zzz processing part type flyout\");\n\t\tfqString = \"((parkerPartNumber_s:\\\"\" + suggestId + \"\\\" AND productType_ss:\\\"Part\\\"))\";\n\t\tgroupField = \"productType_s\";\n\t\tgroupLimit = \"1\";\n\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,customerPartCount_ss,ECOM_JSON_URL_s,parkerPartNumber_s,imageURL_s,productType_s,productSeriesId_l\";\n\t\n\t\tlogger.info(\"zzz fqString is: \" + fqString);\n\t\t\n        break;\t\t\n    default:\n        logger.info(\"zzz CASE FALLTHROUGH flyout type is set to: \" + flyoutType);\n\t\tgroupField=\"suggest_type_s\";\n\t\tgroupLimit=\"1\";\n\t\tfieldList=\"id,title\" + language+\"_t,description\" + language + \"_t,countryId_ss,countryName_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,partCount_i,customerPartCount_ss,ECOM_JSON_URL_s,imageURL_s,productType_s,productSeriesId_l\";\n}\n\n\nlogger.info(\"zzz setting group by field to: \" + groupField);\nlogger.info(\"zzz setting group limit to: \" + groupLimit);\n\nrequest.removeParam(\"q\");\nrequest.addParam(\"q\",\"*:*\");\nrequest.addParam(\"fq\",fqString);\nrequest.addParam(\"group\",\"true\");\nrequest.addParam(\"group.field\",groupField);\nrequest.addParam(\"group.limit\",groupLimit);\nrequest.addParam(\"fl\",fieldList);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query",
    "secretSourceStageId" : "ete"
  }, {
    "type" : "javascript-query",
    "id" : "63b",
    "script" : "function findOring(q){\n  \n  var result = false;\n  \n  logger.info(\"zzz incoming query is: \" + q);\n  \n  var location = q.indexOf(\"o r\");\n  logger.info(\"zzz location is \"+  location); \n  \n  if (q.indexOf(\"o r\")!= -1){ \n    logger.info(\"zzz found an o-ring\");\n    result=true; \n  }\n  else\n  {\n    logger.info(\"zzz did not find an o-ring\");\n  }\n   \n\n  \n  return result;\n}\n\nvar query = request.getFirstParam(\"q\")\nlogger.info(\"zzz suggest query is: \" + query);\n\nif (findOring(query)){\n  logger.info(\"zzz found an o-ring for sure\");\n  var changedQuery = query.replace(/o r/,\"o-r\");\n logger.info(\"zzz new query is \" + changedQuery); \n  \n  request.removeParam(\"q\");\nrequest.addParam(\"q\",changedQuery);\n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Handle Query",
    "secretSourceStageId" : "63b"
  }, {
    "type" : "set-params",
    "id" : "mrt",
    "params" : [ {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Boost by Taxonomy",
    "secretSourceStageId" : "mrt"
  }, {
    "type" : "set-params",
    "id" : "7ar",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7ar"
  }, {
    "type" : "facet",
    "id" : "bto",
    "fieldFacets" : [ {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivision_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "bto",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "fz",
    "params" : [ {
      "key" : "fq",
      "value" : "title_s:*",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "title_s~1^5",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Titles Are Required",
    "secretSourceStageId" : "fz"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-000",
    "rows" : 20,
    "start" : 0,
    "sort" : "",
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 5.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 4.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 2.0
    }, {
      "field" : "autosuggest_general_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_text",
      "boost" : 1.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "parkerDivision_ss",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "id", "countryCode_ss", "storeId_l", "score", "isL1_s", "isL2_s", "isL3_s", "urlKeyword_exact" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest All",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-000"
  }, {
    "type" : "search-fields",
    "id" : "gpp",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_general_text"
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest General",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'news-events' || request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "gpp"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-400",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Products",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-400"
  }, {
    "type" : "search-fields",
    "id" : "2bo",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_support_text",
      "boost" : 100.0
    }, {
      "field" : "autosuggest_support_config_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_cad_text",
      "boost" : 1.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "2bo"
  }, {
    "type" : "set-params",
    "id" : "tru",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSection_ss:News and Events",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News & Events",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "tru"
  }, {
    "type" : "set-params",
    "id" : "o2t",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "o2t"
  }, {
    "type" : "set-params",
    "id" : "rrr",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter Events",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "rrr"
  }, {
    "type" : "set-params",
    "id" : "3l",
    "params" : [ {
      "key" : "tie",
      "value" : "0.99",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_category_text^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "urlKeyword_exactish^4",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_pseries_text^2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_part_text^1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Relevancy Adjustments",
    "secretSourceStageId" : "3l"
  }, {
    "type" : "set-params",
    "id" : "fb",
    "params" : [ {
      "key" : "group",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "group.field",
      "value" : "suggest_type_s",
      "policy" : "append"
    }, {
      "key" : "group.limit",
      "value" : "6",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Suggest Grouping",
    "secretSourceStageId" : "fb"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$contains_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "solr-query",
    "id" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComSuggest-Flyout"
  }
}, {
  "id" : "ParkerDotComTranslations-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "ba35cc30-ff08-466a-bb1b-b33736666b1e",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "ba35cc30-ff08-466a-bb1b-b33736666b1e"
  }, {
    "type" : "search-fields",
    "id" : "5b70c3ec-eb30-4090-92b7-336b40d6e4cb",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "5b70c3ec-eb30-4090-92b7-336b40d6e4cb"
  }, {
    "type" : "facet",
    "id" : "59897439-5a9c-4f4c-8a1a-ee2dfa584b8f",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "59897439-5a9c-4f4c-8a1a-ee2dfa584b8f"
  }, {
    "type" : "solr-query",
    "id" : "b58ff874-f6d0-4e0c-a8b5-f518b1c1d7b7",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "b58ff874-f6d0-4e0c-a8b5-f518b1c1d7b7"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComTranslations-default"
  }
}, {
  "id" : "Suggest-DebugTest",
  "stages" : [ {
    "type" : "set-params",
    "id" : "n6a",
    "params" : [ {
      "key" : "group",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "group.field",
      "value" : "attributeNameEN_s",
      "policy" : "append"
    }, {
      "key" : "group.limit",
      "value" : "6",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "secretSourceStageId" : "n6a"
  }, {
    "type" : "recommendation",
    "id" : "9289b654-9502-49b6-b3b4-7ec133a41a98",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "9289b654-9502-49b6-b3b4-7ec133a41a98",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "search-fields",
    "id" : "ec93c913-af38-43cf-8b33-449fcc318358",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "id", "countryCode_ss", "storeId_l", "attributeNameEN_s", "type_s", "valueEN_ss", "valueJP_ss", "sequence_i" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "ec93c913-af38-43cf-8b33-449fcc318358",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "facet",
    "id" : "700ce58a-0771-45b1-a1b1-31b258a07f1a",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "700ce58a-0771-45b1-a1b1-31b258a07f1a",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "solr-query",
    "id" : "097aaf6a-cbb4-4c63-8448-54dc3748eec0",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "097aaf6a-cbb4-4c63-8448-54dc3748eec0",
    "properties" : {
      "autoCreated" : true
    }
  } ],
  "properties" : {
    "secretSourcePipelineId" : "Suggest-DebugTest"
  }
}, {
  "id" : "MyParkerDotComMain-CS",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionCS_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleCS_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionCS_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleCS_t", "descriptionCS_t", "siteSectionCS_ss", "siteSubSectionCS_ss", "supportResourceTypeCS_ss", "supportTypeCS_ss", "ECOM_JSON_URL_s", "productCS_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionCS_facet", "siteSectionCS_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleCS_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionCS_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleCS_t", "descriptionCS_t", "siteSectionCS_ss", "siteSubSectionCS_ss", "supportResourceTypeCS_ss", "supportTypeCS_ss", "ECOM_JSON_URL_s", "productCS_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionCS_facet", "siteSectionCS_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1CS_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1CS_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1CS\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2CS_facet}productTaxonomyL2CS_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2CS_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1CS\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2CS_facet}productTaxonomyL2CS_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2CS_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2CS_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3CS_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3CS_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLCS THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeCS_facetg_technologyCS_facet}technologyCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionCS_facet}siteSectionCS_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeCS_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionCS_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleCS_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionCS~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleCS_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionCS~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"CS\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-CS"
  }
}, {
  "id" : "MyParkerDotComMain-TH",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionTH_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTH_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTH_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTH_t", "descriptionTH_t", "siteSectionTH_ss", "siteSubSectionTH_ss", "supportResourceTypeTH_ss", "supportTypeTH_ss", "ECOM_JSON_URL_s", "productTH_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTH_facet", "siteSectionTH_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTH_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTH_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTH_t", "descriptionTH_t", "siteSectionTH_ss", "siteSubSectionTH_ss", "supportResourceTypeTH_ss", "supportTypeTH_ss", "ECOM_JSON_URL_s", "productTH_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTH_facet", "siteSectionTH_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1TH_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1TH_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TH\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TH_facet}productTaxonomyL2TH_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2TH_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TH\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TH_facet}productTaxonomyL2TH_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2TH_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2TH_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TH_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TH_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLTH THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTH_facetg_technologyTH_facet}technologyTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTH_facet}siteSectionTH_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeTH_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTH_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTH_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTH~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTH_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTH~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"TH\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-TH"
  }
}, {
  "id" : "ParkerDotComMain-EN",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionEN_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleEN_t", "descriptionEN_t", "siteSectionEN_ss", "siteSubSectionEN_ss", "supportResourceTypeEN_ss", "supportTypeEN_ss", "ECOM_JSON_URL_s", "productEN_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionEN_facet", "siteSectionEN_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleEN_t", "descriptionEN_t", "siteSectionEN_ss", "siteSubSectionEN_ss", "supportResourceTypeEN_ss", "supportTypeEN_ss", "ECOM_JSON_URL_s", "productEN_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionEN_facet", "siteSectionEN_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1EN_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1EN_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1EN\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2EN_facet}productTaxonomyL2EN_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2EN_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1EN\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2EN_facet}productTaxonomyL2EN_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2EN_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2EN_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3EN_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3EN_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\nvar newPrefix = \"\";\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLEN THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\n//request.addParam(\"f.productTaxonomy_facet.facet.prefix\",levelTracker == 1 || levelTracker == 2 ? \" \" +  newPrefix : newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\",newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facetg_technologyEN_facet}technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleEN_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionEN~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleEN_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionEN~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"EN\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (true || list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(defaultCollection,which) {\n   \t\t var docList = [];\n\n\t\t var HttpURLConnection = java.net.HttpURLConnection;\n    \t\tvar URL = java.net.URL;\n    \t\tvar InputStreamReader = java.io.InputStreamReader;\n    \t\tvar BufferedReader = java.io.BufferedReader;\n\n\n      \t\ttry {\n     \t\t\tvar url = new URL(\"http://localhost:8764/api/apollo/solr/\" + defaultCollection + \"/spell?wt=json&spell.dictionary=suggestparts&spellcheck.q=\" + which + \"\");\n        \n      \t\t\tvar c = java.net.HttpURLConnection;\n      \t\t\tc = url.openConnection();\n      \t\t\tc.setRequestProperty(\"Authorization\", \"Basic YWRtaW46UGFya2VyMTIz\");\n      \t\t\tc.connect();\n      \t\t\tvar status = c.getResponseCode();\n      \t\t\t\n      \t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n       \t\t\t\t var reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\t\t var json = reader.readLine();\n\t\t\t\t\t //docList.push(json);\n        \t\t\t var response = JSON.parse(json);\n        \t\t\t \n\t\t\t\t\t var spellcheck = response.spellcheck;\n\t\t\t\t\t //docList.push(spellcheck);\n\t\t\t\t\t\t\n\t\t\t\t\tif( spellcheck ){\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar suggestions = spellcheck.suggestions;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//docList.push(suggestions);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif( suggestions && suggestions.length > 1 ){\n\t\t\t\t\t\t\t//docList.push(suggestions[1]);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(var su in suggestions[1].suggestion){\n\t\t\t\t\t\t\t\tdocList.push(suggestions[1].suggestion[su].word);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n      \t\t\t}\n    \t\t} catch (e) {\n      \t\t\tlogger.error(e);\n\t\t\t\tdocList.push(\"error\" + e);\n    \t\t\t}\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n\n\tvar docList = doQuery(\"ParkerDotComMain\",queryStr);\n  //logger.info(\"zzz doclist: \" + docList.length)\n  \n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\nif( queryStr ){\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-EN"
  }
}, {
  "id" : "lookup",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "5b7bb4b0-5471-4848-9896-60a98e49479a",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "5b7bb4b0-5471-4848-9896-60a98e49479a"
  }, {
    "type" : "search-fields",
    "id" : "39b302dc-6981-42a3-8f9e-38cc576c2e0c",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "39b302dc-6981-42a3-8f9e-38cc576c2e0c"
  }, {
    "type" : "facet",
    "id" : "d6241a0c-727d-4fb0-b244-8030ffe7ec72",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "d6241a0c-727d-4fb0-b244-8030ffe7ec72"
  }, {
    "type" : "solr-query",
    "id" : "675785ea-71f6-4408-a50b-275e41365733",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "675785ea-71f6-4408-a50b-275e41365733"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "lookup"
  }
}, {
  "id" : "ParkerDotComMain-News",
  "stages" : [ {
    "type" : "set-params",
    "id" : "az",
    "params" : [ {
      "key" : "fq",
      "value" : "newsEventsType_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Enforce News Only Documents",
    "secretSourceStageId" : "az"
  }, {
    "type" : "javascript-query",
    "id" : "my9",
    "script" : "var req = request.getParams();\nvar query = request.getFirstParam('q');\n//logger.info(\"zzz QUERY: \" + query);\nvar fqs = request.getParam('fq');\n//logger.info(\"zzz fqs: \" + fqs);\nvar language = \"\";\nvar country = \"\";\nvar division = \"\";\n\nfor each (var item in fqs){\n  \n  // LANGUAGE\n if (item.indexOf('languageCode_ss')==0){\n     var tmp = item.split(':');\n     var language = tmp[1];\n     //logger.info(\"zzz Language: \" + language);\n     }\n  \n  // COUNTRY\n if (item.indexOf('countryId_ss')==0){\n     var tmp = item.split(':');\n     var country = tmp[1];\n     //logger.info(\"zzz Country: \" + country);\n     }  \n\n  // DIVISION\n if (item.indexOf('parkerDivision_ss')==0){\n     var tmp = item.split(':');\n     var division = tmp[1];\n     //logger.info(\"zzz Division: \" + division);\n     }  \n  \n //logger.info(\"zzz FQS: \" + item); \n}\n\nvar rows = request.getFirstParam('rows');\n//logger.info(\"zzz Rows: \" + rows);\n\nvar title=\"title\" + language + \"_t\";\n//logger.info(\"zzz Title Field: \" + title);\nvar description=\"description\" + language + \"_t\";\nvar body =\"body_t\";\n\nrequest.removeParam(\"sort\");\nrequest.addParam(\"sort\",\"newsDate_dt desc\");\nrequest.addParam(\"qf\",title+\"^5\");\nrequest.addParam(\"qf\",description+\"^2\");\nrequest.addParam(\"qf\",body+\"^1\");\nrequest.addParam(\"qf\",\"_text_^1\");\n\nvar fieldList = title +\",\" + description + \",\" + \"ot_id_s,\" + \"newsDate_dt,\" + \"languageCode_ss,\" + \"otChannel_0_s,\" + \"otContentTypeId_s,\" +  \"otF6_s,\" + \"newsType_ss,\" + \"newsYear_i,\" + \"otF3,\" + \"score\";\nrequest.addParam(\"fl\",fieldList);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Interpret Parameters and Configure Pipeline",
    "secretSourceStageId" : "my9"
  }, {
    "type" : "recommendation",
    "id" : "38a547fb-d9ab-4a11-baec-6ce9bb7f72ca",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "38a547fb-d9ab-4a11-baec-6ce9bb7f72ca",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "facet",
    "id" : "8cb83cc0-6c3f-44a6-8964-ae90e6253955",
    "fieldFacets" : [ {
      "field" : "newsEventsType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "8cb83cc0-6c3f-44a6-8964-ae90e6253955",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "solr-query",
    "id" : "f61dc4a6-2d6b-40a2-99b1-b51f33501bb6",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "f61dc4a6-2d6b-40a2-99b1-b51f33501bb6",
    "properties" : {
      "autoCreated" : true
    }
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-News"
  }
}, {
  "id" : "ParkerDivisions-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "9562925c-84d8-4ec3-8106-27bf87c04626",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "9562925c-84d8-4ec3-8106-27bf87c04626"
  }, {
    "type" : "search-fields",
    "id" : "eb6dfe6e-bb59-4716-8c55-065ea036590a",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "eb6dfe6e-bb59-4716-8c55-065ea036590a"
  }, {
    "type" : "facet",
    "id" : "59383505-b5e0-4233-ad6b-c4ac71acde70",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "59383505-b5e0-4233-ad6b-c4ac71acde70"
  }, {
    "type" : "solr-query",
    "id" : "a9478021-ba9d-43ee-8d42-5eb9ccd053f0",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "a9478021-ba9d-43ee-8d42-5eb9ccd053f0"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDivisions-default"
  }
}, {
  "id" : "ParkerDotComAttributes-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "618d7404-a3b5-405c-b563-6f74751b09a5",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "618d7404-a3b5-405c-b563-6f74751b09a5"
  }, {
    "type" : "search-fields",
    "id" : "76fca48d-4bc8-4a7f-bac8-093b1c5e12c2",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "76fca48d-4bc8-4a7f-bac8-093b1c5e12c2"
  }, {
    "type" : "facet",
    "id" : "56cc16e5-d08f-4955-8ab7-ffc72c022ee2",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "56cc16e5-d08f-4955-8ab7-ffc72c022ee2"
  }, {
    "type" : "solr-query",
    "id" : "5ab304ee-4bb1-4bca-b923-0393513d64d7",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5ab304ee-4bb1-4bca-b923-0393513d64d7"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComAttributes-default"
  }
}, {
  "id" : "ParkerDotComMain-HU",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionHU_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleHU_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionHU_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleHU_t", "descriptionHU_t", "siteSectionHU_ss", "siteSubSectionHU_ss", "supportResourceTypeHU_ss", "supportTypeHU_ss", "ECOM_JSON_URL_s", "productHU_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionHU_facet", "siteSectionHU_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleHU_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionHU_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleHU_t", "descriptionHU_t", "siteSectionHU_ss", "siteSubSectionHU_ss", "supportResourceTypeHU_ss", "supportTypeHU_ss", "ECOM_JSON_URL_s", "productHU_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionHU_facet", "siteSectionHU_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1HU_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1HU_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1HU\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2HU_facet}productTaxonomyL2HU_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2HU_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1HU\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2HU_facet}productTaxonomyL2HU_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2HU_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2HU_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3HU_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3HU_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLHU THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeHU_facetg_technologyHU_facet}technologyHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionHU_facet}siteSectionHU_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeHU_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionHU_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleHU_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionHU~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleHU_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionHU~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"HU\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-HU"
  }
}, {
  "id" : "test-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "e03fcd3d-67c5-4ca5-bf09-3abff82aa01b",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "e03fcd3d-67c5-4ca5-bf09-3abff82aa01b"
  }, {
    "type" : "search-fields",
    "id" : "d2892820-92ff-437a-b33d-3dd0676a62ec",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "d2892820-92ff-437a-b33d-3dd0676a62ec"
  }, {
    "type" : "facet",
    "id" : "a0dcc1cb-3b07-4fce-9fc5-0b3996cbca1c",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "a0dcc1cb-3b07-4fce-9fc5-0b3996cbca1c"
  }, {
    "type" : "solr-query",
    "id" : "d868aca8-56aa-4d9a-93ba-fca604b1c124",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "d868aca8-56aa-4d9a-93ba-fca604b1c124"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "test-default"
  }
}, {
  "id" : "MyParkerDotComMain-KO",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionKO_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleKO_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionKO_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleKO_t", "descriptionKO_t", "siteSectionKO_ss", "siteSubSectionKO_ss", "supportResourceTypeKO_ss", "supportTypeKO_ss", "ECOM_JSON_URL_s", "productKO_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionKO_facet", "siteSectionKO_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleKO_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionKO_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleKO_t", "descriptionKO_t", "siteSectionKO_ss", "siteSubSectionKO_ss", "supportResourceTypeKO_ss", "supportTypeKO_ss", "ECOM_JSON_URL_s", "productKO_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionKO_facet", "siteSectionKO_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1KO_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1KO_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1KO\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2KO_facet}productTaxonomyL2KO_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2KO_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1KO\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2KO_facet}productTaxonomyL2KO_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2KO_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2KO_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3KO_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3KO_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLKO THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeKO_facetg_technologyKO_facet}technologyKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionKO_facet}siteSectionKO_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeKO_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionKO_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleKO_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionKO~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleKO_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionKO~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"KO\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-KO"
  }
}, {
  "id" : "ParkerDotComSuggest-orig",
  "stages" : [ {
    "type" : "set-params",
    "id" : "rgz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    }, {
      "key" : "expand",
      "value" : "true",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "rgz"
  }, {
    "type" : "facet",
    "id" : "bto",
    "fieldFacets" : [ {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivision_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "bto",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "fz",
    "params" : [ {
      "key" : "fq",
      "value" : "title_s:*",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "title_s~1^5",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Titles Are Required",
    "secretSourceStageId" : "fz"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-000",
    "rows" : 20,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "autosuggest_general_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_text",
      "boost" : 1.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "parkerDivision_ss",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "id", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest All",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-000"
  }, {
    "type" : "search-fields",
    "id" : "gpp",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_general_text"
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest General",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'news-events' || request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "gpp"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-400",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Products",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-400"
  }, {
    "type" : "search-fields",
    "id" : "2bo",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_support_text",
      "boost" : 100.0
    }, {
      "field" : "autosuggest_support_config_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_cad_text",
      "boost" : 1.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "2bo"
  }, {
    "type" : "set-params",
    "id" : "vaq",
    "params" : [ {
      "key" : "bq",
      "value" : "siteSubSection_ss:Product Category^10",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Boost Product Category",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "vaq"
  }, {
    "type" : "set-params",
    "id" : "tru",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSection_ss:News and Events",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News & Events",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "tru"
  }, {
    "type" : "set-params",
    "id" : "o2t",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "o2t"
  }, {
    "type" : "set-params",
    "id" : "rrr",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter Events",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "rrr"
  }, {
    "type" : "set-params",
    "id" : "3l",
    "params" : [ {
      "key" : "tie",
      "value" : "0.99",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_category_text^10",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "urlKeyword_exactish^4",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_pseries_text^7",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_part_text^3",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "secretSourceStageId" : "3l"
  }, {
    "type" : "set-params",
    "id" : "fb",
    "params" : [ {
      "key" : "group",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "group.field",
      "value" : "suggest_type_s",
      "policy" : "append"
    }, {
      "key" : "group.limit",
      "value" : "6",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Suggest Grouping",
    "secretSourceStageId" : "fb"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$contains_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "3ze",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Rules: Process",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "3ze"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "solr-query",
    "id" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComSuggest-orig"
  }
}, {
  "id" : "MyParkerDotComMain-SV",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionSV_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleSV_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionSV_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleSV_t", "descriptionSV_t", "siteSectionSV_ss", "siteSubSectionSV_ss", "supportResourceTypeSV_ss", "supportTypeSV_ss", "ECOM_JSON_URL_s", "productSV_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionSV_facet", "siteSectionSV_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleSV_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionSV_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleSV_t", "descriptionSV_t", "siteSectionSV_ss", "siteSubSectionSV_ss", "supportResourceTypeSV_ss", "supportTypeSV_ss", "ECOM_JSON_URL_s", "productSV_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionSV_facet", "siteSectionSV_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1SV_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1SV_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1SV\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2SV_facet}productTaxonomyL2SV_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2SV_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1SV\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2SV_facet}productTaxonomyL2SV_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2SV_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2SV_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3SV_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3SV_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLSV THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologySV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeSV_facetg_technologySV_facet}technologySV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologySV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologySV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionSV_facet}siteSectionSV_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeSV_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionSV_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleSV_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionSV~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleSV_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionSV~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"SV\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-SV"
  }
}, {
  "id" : "ParkerDotComMain-PL",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionPL_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titlePL_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionPL_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titlePL_t", "descriptionPL_t", "siteSectionPL_ss", "siteSubSectionPL_ss", "supportResourceTypePL_ss", "supportTypePL_ss", "ECOM_JSON_URL_s", "productPL_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionPL_facet", "siteSectionPL_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titlePL_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionPL_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titlePL_t", "descriptionPL_t", "siteSectionPL_ss", "siteSubSectionPL_ss", "supportResourceTypePL_ss", "supportTypePL_ss", "ECOM_JSON_URL_s", "productPL_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionPL_facet", "siteSectionPL_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1PL_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1PL_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1PL\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2PL_facet}productTaxonomyL2PL_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2PL_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1PL\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2PL_facet}productTaxonomyL2PL_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2PL_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2PL_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3PL_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3PL_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLPL THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePL_facetg_technologyPL_facet}technologyPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPL_facet}siteSectionPL_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypePL_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPL_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titlePL_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionPL~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titlePL_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionPL~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"PL\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-PL"
  }
}, {
  "id" : "MyParkerDotComSuggest",
  "stages" : [ {
    "type" : "set-params",
    "id" : "dtl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    }, {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Series\" AND -(countryId_ss:[* TO *]))",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "dtl"
  }, {
    "type" : "javascript-query",
    "id" : "jk",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:(\\\"\" + formatPipe(authID) + \"\\\"))\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\")\";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:(\\\"\" + formatPipe(authID) + \"\\\"))\";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "jk"
  }, {
    "type" : "set-params",
    "id" : "dl",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "dl"
  }, {
    "type" : "set-params",
    "id" : "5s",
    "params" : [ {
      "key" : "fl",
      "value" : "title_s,countryId_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l,productType_ss,productType_s,productSeriesId_l,parkerPartNumber_s,categoryIdList_s",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Field List for Suggest",
    "secretSourceStageId" : "5s"
  }, {
    "type" : "javascript-query",
    "id" : "63b",
    "script" : "function findOring(q){\n  \n  var result = false;\n  \n  logger.info(\"zzz incoming query is: \" + q);\n  \n  var location = q.indexOf(\"o r\");\n  logger.info(\"zzz location is \"+  location); \n  \n  if (q.indexOf(\"o r\")!= -1){ \n    logger.info(\"zzz found an o-ring\");\n    result=true; \n  }\n  else\n  {\n    logger.info(\"zzz did not find an o-ring\");\n  }\n   \n\n  \n  return result;\n}\n\nvar query = request.getFirstParam(\"q\")\nlogger.info(\"zzz suggest query is: \" + query);\n\nif (findOring(query)){\n  logger.info(\"zzz found an o-ring for sure\");\n  var changedQuery = query.replace(/o r/,\"o-r\");\n logger.info(\"zzz new query is \" + changedQuery); \n  \n  request.removeParam(\"q\");\nrequest.addParam(\"q\",changedQuery);\n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Handle Query",
    "secretSourceStageId" : "63b"
  }, {
    "type" : "set-params",
    "id" : "mrt",
    "params" : [ {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Boost by Taxonomy",
    "secretSourceStageId" : "mrt"
  }, {
    "type" : "set-params",
    "id" : "7ar",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7ar"
  }, {
    "type" : "facet",
    "id" : "bto",
    "fieldFacets" : [ {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivision_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_s",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "siteSection_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "bto",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "fz",
    "params" : [ {
      "key" : "fq",
      "value" : "title_s:*",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "title_s~1^5",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Titles Are Required",
    "secretSourceStageId" : "fz"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-000",
    "rows" : 20,
    "start" : 0,
    "sort" : "",
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 5.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 4.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 2.0
    }, {
      "field" : "autosuggest_general_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_text",
      "boost" : 1.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "parkerDivision_ss",
      "boost" : 1.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "id", "countryCode_ss", "storeId_l", "score", "isL1_s", "isL2_s", "isL3_s", "urlKeyword_exact" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest All",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-000"
  }, {
    "type" : "search-fields",
    "id" : "gpp",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_general_text"
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest General",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'news-events' || request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "gpp"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-400",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 14.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 12.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Products",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-400"
  }, {
    "type" : "search-fields",
    "id" : "2bo",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_support_text",
      "boost" : 100.0
    }, {
      "field" : "autosuggest_support_config_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_cad_text",
      "boost" : 1.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "2bo"
  }, {
    "type" : "set-params",
    "id" : "tru",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSection_ss:News and Events",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News & Events",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "tru"
  }, {
    "type" : "set-params",
    "id" : "o2t",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "o2t"
  }, {
    "type" : "set-params",
    "id" : "rrr",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter Events",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "rrr"
  }, {
    "type" : "set-params",
    "id" : "3l",
    "params" : [ {
      "key" : "tie",
      "value" : "0.99",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_category_text^5",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "urlKeyword_exactish^4",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_pseries_text^3",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Relevancy Adjustments",
    "secretSourceStageId" : "3l"
  }, {
    "type" : "set-params",
    "id" : "fb",
    "params" : [ {
      "key" : "group",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "group.field",
      "value" : "suggest_type_s",
      "policy" : "append"
    }, {
      "key" : "group.limit",
      "value" : "6",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Suggest Grouping",
    "secretSourceStageId" : "fb"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$contains_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "solr-query",
    "id" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComSuggest"
  }
}, {
  "id" : "ParkerDotComMain-TR",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionTR_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTR_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTR_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTR_t", "descriptionTR_t", "siteSectionTR_ss", "siteSubSectionTR_ss", "supportResourceTypeTR_ss", "supportTypeTR_ss", "ECOM_JSON_URL_s", "productTR_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTR_facet", "siteSectionTR_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTR_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTR_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTR_t", "descriptionTR_t", "siteSectionTR_ss", "siteSubSectionTR_ss", "supportResourceTypeTR_ss", "supportTypeTR_ss", "ECOM_JSON_URL_s", "productTR_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTR_facet", "siteSectionTR_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1TR_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1TR_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TR\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TR_facet}productTaxonomyL2TR_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2TR_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TR\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TR_facet}productTaxonomyL2TR_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2TR_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2TR_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TR_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TR_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLTR THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTR_facetg_technologyTR_facet}technologyTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTR_facet}siteSectionTR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeTR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTR_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTR~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTR_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTR~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"TR\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-TR"
  }
}, {
  "id" : "ParkerDotComMain-EN2",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionEN_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleEN_t", "descriptionEN_t", "siteSectionEN_ss", "siteSubSectionEN_ss", "supportResourceTypeEN_ss", "supportTypeEN_ss", "ECOM_JSON_URL_s", "productEN_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionEN_facet", "siteSectionEN_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleEN_t", "descriptionEN_t", "siteSectionEN_ss", "siteSubSectionEN_ss", "supportResourceTypeEN_ss", "supportTypeEN_ss", "ECOM_JSON_URL_s", "productEN_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionEN_facet", "siteSectionEN_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1EN_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1EN_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1EN\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2EN_facet}productTaxonomyL2EN_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2EN_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1EN\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2EN_facet}productTaxonomyL2EN_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2EN_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2EN_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3EN_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3EN_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLEN THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facetg_technologyEN_facet}technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_facet}siteSectionEN_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeEN_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionEN_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleEN_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionEN~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleEN_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionEN~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"EN\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-EN2"
  }
}, {
  "id" : "MyParkerDotComMain-FR",
  "stages" : [ {
    "type" : "set-params",
    "id" : "3zl",
    "params" : [ {
      "key" : "fq",
      "value" : "-(productType_s:\"Product Category\" AND -countryId_ss:mypark)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Exclude Product Categories",
    "secretSourceStageId" : "3zl"
  }, {
    "type" : "javascript-query",
    "id" : "4xvd",
    "script" : "function isValidCredentials (customer,auth){\n\t\n\tvar valid = 0;\n\t\n\t//logger.info(\"zzz checking validity\");\n\t\n\tif (customer!=null || auth!=null){\n\t\tvalid = 1;\n\t\t//logger.info(\"zzz this is a valid credential request\");\n\t} \n\telse\n\t{\n\t\t//logger.info(\"zzz this request is missing credentials\");\n\t}\n\t\n\treturn valid;\n}\n\n\n\n\nfunction formatPipe(incoming) {\n \n var i = 0, length = incoming.length;\n \n  \n  if (incoming.indexOf(\"|\"))\n      {\n      \t //logger.info(\"zzz found a pipe!\");\n      \t \n \n   \t\t\tincoming = incoming.replace(/\\|/g, '\\\"|\\\"');\n \n \t\t\n      }\n  else\n  {\n    //logger.info(\"zzz no pipe\");\n  }\n  \n \n return incoming;\n \n}\n\n\n\nvar customerID = request.getFirstParam(\"customerID\");\nvar authID = request.getFirstParam(\"authID\");\nvar fqString;\nvar validID = 0;\n\n//logger.info(\"zzz request fq: \" + request.getFirstParam(\"fq\"));\n\n//logger.info(\"zzzzzzz request : \" + request.getParams);\n\n//logger.info(\"zzz customerID incoming:  \" + customerID);\n//logger.info(\"zzz authID incoming:  \" + authID);\n\nvar customerFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar authFQ = \"authIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\nvar comboFQ = \"customerIds_ss:\\\"\" + \"MISSING\" + \"\\\"\";\n\n//logger.info(\"zzz starting customer and Auth ID processing\");\n\nvalidID = isValidCredentials(customerID,authID);\n\nif (validID==0){\n  //logger.info(\"zzz once again validID is: \" + validID);\n  request.addParam(\"fq\",\"customerIds_ss:MISSING\");\n // logger.info(\"zzzzzzzzzzzzz : no valid ID was passed, protecting private results\");\n}\n\nif (validID==1){\n//logger.info(\"zzz customerID is: \" + customerID);\n \n  if (customerID!=null && authID!=null){\n\t  comboFQ= \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") OR ((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\")\";\n  }\n\t  \n\n  if (customerID!=null){\n    customerFQ = \"((audience_ss:private OR audience_ss:public) AND customerIds_ss:\\\"\" + formatPipe(customerID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no customerID 2\");\n  }\n  if (authID!=null) {\n   authFQ = \"((audience_ss:private OR audience_ss:public) AND authIds_ss:\\\"\" + formatPipe(authID) + \"\\\") \";\n  }\n  else\n  {\n    //logger.info(\"zzz no authID 2\");\n  }\n  \nif (authID!=null && customerID!=null)\n{\n  //logger.info(\"zzz double FQs\");\n  fqString = comboFQ;\n}\n  else if (customerID!=null)\n  {\n    //logger.info(\"zzz customer FQs\");\n    fqString = customerFQ;\n  }\n  \n  else if (authID!=null)\n  {\n    //logger.info(\"zzz authID FQs\");\n    fqString = authFQ;\n  }\n  else {\n    //logger.info(\"zzz fqString is nothing ...\");\n  }\n  \n  //logger.info(\"zzz adding fqString as ... \" + fqString);\n\nrequest.addParam(\"fq\",fqString);\n  \n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Handle Parameters and Set Query for Customer and Auth IDs",
    "secretSourceStageId" : "4xvd"
  }, {
    "type" : "set-params",
    "id" : "e4d",
    "params" : [ {
      "key" : "fq",
      "value" : "((productType_ss:\"Product Series\" OR productType_ss:\"Part\") AND audience_ss:\"private\") OR (siteSection_ss:Support)",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Restrict to PS-Parts-Support",
    "secretSourceStageId" : "e4d"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\turl = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n\n              //logger.info(\"zzz response: \" + response);\n              \n              if (response.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  //logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                //logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"PTS_REST Call Error: \" + e);\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS-REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\n//logger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\n//logger.info(\"zzz ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\n//logger.info(\"zzzz *********Log1: \" +queryRPC);\n//logger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\n//logger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\n//logger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz  original query: \" + originalQuery);\n\n//logger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\t//logger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionFR_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleFR_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionFR_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleFR_t", "descriptionFR_t", "siteSectionFR_ss", "siteSubSectionFR_ss", "supportResourceTypeFR_ss", "supportTypeFR_ss", "ECOM_JSON_URL_s", "productFR_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionFR_facet", "siteSectionFR_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleFR_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionFR_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleFR_t", "descriptionFR_t", "siteSectionFR_ss", "siteSubSectionFR_ss", "supportResourceTypeFR_ss", "supportTypeFR_ss", "ECOM_JSON_URL_s", "productFR_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionFR_facet", "siteSectionFR_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s", "customerPartCount_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1FR_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1FR_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1FR\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2FR_facet}productTaxonomyL2FR_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2FR_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1FR\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2FR_facet}productTaxonomyL2FR_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2FR_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2FR_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3FR_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3FR_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLFR THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFR_facetg_technologyFR_facet}technologyFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionFR_facet}siteSectionFR_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeFR_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionFR_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleFR_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionFR~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleFR_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionFR~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"FR\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "df3",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Part Suggestion",
    "secretSourceStageId" : "df3"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "MyParkerDotComMain-FR"
  }
}, {
  "id" : "ParkerDotComMain-EN3",
  "stages" : [ {
    "type" : "set-params",
    "id" : "qxgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "hl.fl",
      "value" : "*",
      "policy" : "append"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "qxgu"
  }, {
    "type" : "recommendation",
    "id" : "q551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "q551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "q5387a171-00ea-48b8-af91-06609a4656cb",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "titleEN_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionEN_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_"
    }, {
      "field" : "productTaxonomyEN_t",
      "boost" : 7.0
    }, {
      "field" : "compressedPartNumber_t",
      "boost" : 6.0
    }, {
      "field" : "parkerPartNumber_t",
      "boost" : 6.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 3.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 5.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 5.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 5.0
    }, {
      "field" : "productEN_t",
      "boost" : 7.0
    } ],
    "returnFields" : [ "*", "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "q5387a171-00ea-48b8-af91-06609a4656cb"
  }, {
    "type" : "set-params",
    "id" : "q92",
    "params" : [ {
      "key" : "pf2",
      "value" : "titleEN_t^10",
      "policy" : "append"
    }, {
      "key" : "pf2",
      "value" : "descriptionEN_t^5",
      "policy" : "append"
    }, {
      "key" : "pf2",
      "value" : "body_t^2",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "siteSubSection_ss:\"About Us\"^50",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "siteSubSection_ss:\"Product Series\"^125",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "siteSubSection_ss:\"Product Category\"^80",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Relevancy tuning",
    "secretSourceStageId" : "q92"
  }, {
    "type" : "set-params",
    "id" : "q7fo",
    "params" : [ {
      "key" : "bq",
      "value" : "priority_i:8^80",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "priority_i:7^70",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "priority_i:6^60",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "priority_i:5^50",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "priority_i:4^40",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "priority_i:3^30",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "priority_i:2^20",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "priority_i:1^10",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Relevancy Tuning - Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "q7fo"
  }, {
    "type" : "search-fields",
    "id" : "qv2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "qv2r"
  }, {
    "type" : "set-params",
    "id" : "qtje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportTypeEN_ss}supportTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_ss}parkerDivisionName_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || !request.hasParam('tab')",
    "secretSourceStageId" : "qtje"
  }, {
    "type" : "set-params",
    "id" : "qqys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_ss}parkerDivisionName_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qqys"
  }, {
    "type" : "set-params",
    "id" : "qbc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportTypeEN_ss}supportTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportResourceTypeEN_ss}supportResourceTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_marketEN_ss}marketEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_technologyEN_ss}technologyEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_brand_ss}brand_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_cadType_ss}cadType_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_productEN_ss}productEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_languageName_ss}languageName_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_fileType_ss}fileType_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_ss}parkerDivisionName_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qbc8"
  }, {
    "type" : "set-params",
    "id" : "q12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "q12d"
  }, {
    "type" : "set-params",
    "id" : "qws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_technologyEN_ss}technologyEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_newsYear_i}newsYear_i",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_ss}parkerDivisionName_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "qws1"
  }, {
    "type" : "set-params",
    "id" : "qkkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_marketEN_ss}marketEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_technologyEN_ss}technologyEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_brand_ss}brand_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_ss}parkerDivisionName_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "qkkf"
  }, {
    "type" : "set-params",
    "id" : "q3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_ss}parkerDivisionName_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "q3ed"
  }, {
    "type" : "set-params",
    "id" : "qtrsj",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportTypeEN_ss}supportTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportResourceTypeEN_ss}supportResourceTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_cadType_ss}cadType_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_fileType_ss}fileType_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'division' ",
    "secretSourceStageId" : "qtrsj"
  }, {
    "type" : "facet",
    "id" : "qat",
    "fieldFacets" : [ {
      "field" : "productTaxonomyL2EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL3EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivisionName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "newsType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "eventType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "All Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'debug' || !request.hasParam('tab')",
    "secretSourceStageId" : "qat"
  }, {
    "type" : "facet",
    "id" : "qowb",
    "fieldFacets" : [ {
      "field" : "productTaxonomyL2EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL3EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivisionName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "Products Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qowb"
  }, {
    "type" : "facet",
    "id" : "qv46",
    "fieldFacets" : [ {
      "field" : "cadType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productEN_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivisionName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "fileType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "Support Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qv46"
  }, {
    "type" : "facet",
    "id" : "qc6d",
    "fieldFacets" : [ {
      "field" : "parkerDivisionName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "General Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'general' ",
    "secretSourceStageId" : "qc6d"
  }, {
    "type" : "facet",
    "id" : "q20q",
    "fieldFacets" : [ {
      "field" : "productTaxonomyL2EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL3EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "cadType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "fileType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "Division Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'division' ",
    "secretSourceStageId" : "q20q"
  }, {
    "type" : "facet",
    "id" : "qe6",
    "fieldFacets" : [ {
      "field" : "newsType_ss",
      "sort" : "index",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivisionName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "newsYear_i",
      "sort" : "index",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "News Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "qe6"
  }, {
    "type" : "facet",
    "id" : "qqdl",
    "fieldFacets" : [ {
      "field" : "eventType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "Events Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'events' || request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "qqdl"
  }, {
    "type" : "facet",
    "id" : "qay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qay"
  }, {
    "type" : "facet",
    "id" : "q542b5219-b9bc-497e-a2f7-625cf05bb657",
    "fieldFacets" : [ {
      "field" : "languageName_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivisionName_ss",
      "sort" : "index",
      "minCount" : 1,
      "missing" : true
    }, {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "General Facets",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'all'",
    "secretSourceStageId" : "q542b5219-b9bc-497e-a2f7-625cf05bb657",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "facet",
    "id" : "q6qp",
    "fieldFacets" : [ {
      "field" : "productTaxonomyL1EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL2EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL3EN_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "Product-Part Facets",
    "condition" : "request.getFirstParam('tab') == 'parts' || request.getFirstParam('tab') == 'all'",
    "secretSourceStageId" : "q6qp"
  }, {
    "type" : "facet",
    "id" : "qxft",
    "fieldFacets" : [ {
      "field" : "supportTypeEN_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "supportResourceTypeEN_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "cadType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : true,
    "label" : "Support Facets",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'all'",
    "secretSourceStageId" : "qxft"
  }, {
    "type" : "set-params",
    "id" : "q4g",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_productTaxonomyL1EN_s}productTaxonomyL1EN_s",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportTypeEN_ss}supportTypeEN_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "All Tab - Fixed Facets",
    "condition" : "request.getFirstParam('tab') == 'all' || !request.hasParam('tab')",
    "secretSourceStageId" : "q4g"
  }, {
    "type" : "set-params",
    "id" : "qjnr",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_productTaxonomyL1EN_s}productTaxonomyL1EN_s",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Products Tab - Fixed Facets",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "qjnr"
  }, {
    "type" : "set-params",
    "id" : "qppi",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportTypeEN_ss}supportTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportResourceTypeEN_ss}supportResourceTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_technology_ss}technology_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_market_ss}market_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_brand_ss}brand_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Support Tab - Fixed Facets",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "qppi"
  }, {
    "type" : "set-params",
    "id" : "qz8g",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "General Tab - Fixed Facets",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "qz8g"
  }, {
    "type" : "set-params",
    "id" : "q5dg",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionEN_ss}siteSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSectionEN_ss}siteSubSectionEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportTypeEN_ss}supportTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_supportResourceTypeEN_ss}supportResourceTypeEN_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_productTaxonomyL1EN_s}productTaxonomyL1EN_s",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Division Tab - Fixed Facets",
    "condition" : "request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "q5dg"
  }, {
    "type" : "set-params",
    "id" : "qlku",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_market_ss}market_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_brand_ss}brand_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "News Tab - Fixed Facets",
    "condition" : "request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "qlku"
  }, {
    "type" : "set-params",
    "id" : "qqxa",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_technology_ss}technology_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_market_ss}market_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_brand_ss}brand_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Events Tab - Fixed Facets",
    "condition" : "request.getFirstParam('tab') == 'events' || request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "qqxa"
  }, {
    "type" : "set-params",
    "id" : "qmmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "qmmn"
  }, {
    "type" : "set-params",
    "id" : "q1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"EN\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "q1vn"
  }, {
    "type" : "solr-query",
    "id" : "q5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "q5f4254e5-db98-4f3c-9bca-fb42798c1928"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-EN3"
  }
}, {
  "id" : "ParkerDotComSuggest-christest",
  "stages" : [ {
    "type" : "set-params",
    "id" : "vrg",
    "params" : [ {
      "key" : "fl",
      "value" : "title_s,countryId_ss,languageCode_ss,urlKeyword_s,categoryId_l,suggest_type_s,productTaxonomyL1_s,productTaxonomyL2_s,productTaxonomyL3_s,id,countryCode_ss,storeId_l",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Field List",
    "condition" : "",
    "secretSourceStageId" : "vrg"
  }, {
    "type" : "set-params",
    "id" : "rgz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    }, {
      "key" : "expand",
      "value" : "true",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : true,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "rgz"
  }, {
    "type" : "facet",
    "id" : "bto",
    "fieldFacets" : [ {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "parkerDivision_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "bto",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "set-params",
    "id" : "fz",
    "params" : [ {
      "key" : "fq",
      "value" : "title_s:*",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "title_s~1^5",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Titles Are Required",
    "secretSourceStageId" : "fz"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-000",
    "rows" : 20,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "autosuggest_general_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_text",
      "boost" : 1.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    }, {
      "field" : "parkerDivision_ss",
      "boost" : 1.0
    } ],
    "returnFields" : [ "", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "id", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest All",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'division'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-000"
  }, {
    "type" : "search-fields",
    "id" : "gpp",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_general_text"
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest General",
    "condition" : "request.getFirstParam('tab') == 'general' || request.getFirstParam('tab') == 'news-events' || request.getFirstParam('tab') == 'news' || request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "gpp"
  }, {
    "type" : "search-fields",
    "id" : "a43d77b6-4b80-4539-400",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_category_text",
      "boost" : 15.0
    }, {
      "field" : "autosuggest_pseries_text",
      "boost" : 10.0
    }, {
      "field" : "autosuggest_part_text",
      "boost" : 5.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Products",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "a43d77b6-4b80-4539-400"
  }, {
    "type" : "search-fields",
    "id" : "2bo",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "autosuggest_support_text",
      "boost" : 100.0
    }, {
      "field" : "autosuggest_support_config_text",
      "boost" : 1.0
    }, {
      "field" : "autosuggest_support_cad_text",
      "boost" : 1.0
    }, {
      "field" : "suggest_type_s",
      "boost" : 1.0
    } ],
    "returnFields" : [ "title_s", "countryId_ss", "languageCode_ss", "urlKeyword_s", "categoryId_l", "suggest_type_s", "productTaxonomyL1_s", "productTaxonomyL2_s", "productTaxonomyL3_s", "countryCode_ss", "storeId_l" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "Suggest Support",
    "condition" : "request.getFirstParam('tab') == 'support'",
    "secretSourceStageId" : "2bo"
  }, {
    "type" : "set-params",
    "id" : "vaq",
    "params" : [ {
      "key" : "bq",
      "value" : "siteSubSection_ss:Product Category^10",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Boost Product Category",
    "condition" : "request.getFirstParam('tab') == 'products'",
    "secretSourceStageId" : "vaq"
  }, {
    "type" : "set-params",
    "id" : "tru",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSection_ss:News and Events",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News & Events",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "tru"
  }, {
    "type" : "set-params",
    "id" : "o2t",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:News",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter News",
    "condition" : "request.getFirstParam('tab') == 'news'",
    "secretSourceStageId" : "o2t"
  }, {
    "type" : "set-params",
    "id" : "rrr",
    "params" : [ {
      "key" : "fq",
      "value" : "siteSubSection_ss:Event",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Filter Events",
    "condition" : "request.getFirstParam('tab') == 'events'",
    "secretSourceStageId" : "rrr"
  }, {
    "type" : "set-params",
    "id" : "3l",
    "params" : [ {
      "key" : "tie",
      "value" : "0.99",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_category_text^10",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "urlKeyword_exactish^4",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_pseries_text^7",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "autosuggest_part_text^3",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "secretSourceStageId" : "3l"
  }, {
    "type" : "set-params",
    "id" : "fb",
    "params" : [ {
      "key" : "group",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "group.field",
      "value" : "suggest_type_s",
      "policy" : "append"
    }, {
      "key" : "group.limit",
      "value" : "6",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Suggest Grouping",
    "secretSourceStageId" : "fb"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$contains_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "3ze",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "Rules: Process",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "3ze"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "solr-query",
    "id" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "5aa04956-bac3-4eb3-8ef6-4a09b0bda3dc"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComSuggest-christest"
  }
}, {
  "id" : "ParkerDotComMain-DE",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionDE_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleDE_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionDE_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleDE_t", "descriptionDE_t", "siteSectionDE_ss", "siteSubSectionDE_ss", "supportResourceTypeDE_ss", "supportTypeDE_ss", "ECOM_JSON_URL_s", "productDE_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionDE_facet", "siteSectionDE_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleDE_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionDE_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleDE_t", "descriptionDE_t", "siteSectionDE_ss", "siteSubSectionDE_ss", "supportResourceTypeDE_ss", "supportTypeDE_ss", "ECOM_JSON_URL_s", "productDE_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionDE_facet", "siteSectionDE_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1DE_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1DE_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1DE\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2DE_facet}productTaxonomyL2DE_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2DE_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1DE\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2DE_facet}productTaxonomyL2DE_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2DE_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2DE_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3DE_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3DE_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLDE THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDE_facetg_technologyDE_facet}technologyDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDE_facet}siteSectionDE_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeDE_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDE_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleDE_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionDE~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleDE_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionDE~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"DE\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-DE"
  }
}, {
  "id" : "ParkerDotComMain-PT",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionPT_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titlePT_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionPT_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titlePT_t", "descriptionPT_t", "siteSectionPT_ss", "siteSubSectionPT_ss", "supportResourceTypePT_ss", "supportTypePT_ss", "ECOM_JSON_URL_s", "productPT_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionPT_facet", "siteSectionPT_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titlePT_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionPT_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titlePT_t", "descriptionPT_t", "siteSectionPT_ss", "siteSubSectionPT_ss", "supportResourceTypePT_ss", "supportTypePT_ss", "ECOM_JSON_URL_s", "productPT_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionPT_facet", "siteSectionPT_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1PT_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1PT_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1PT\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2PT_facet}productTaxonomyL2PT_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2PT_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1PT\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2PT_facet}productTaxonomyL2PT_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2PT_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2PT_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3PT_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3PT_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLPT THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePT_facetg_technologyPT_facet}technologyPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionPT_facet}siteSectionPT_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypePT_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionPT_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titlePT_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionPT~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titlePT_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionPT~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"PT\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-PT"
  }
}, {
  "id" : "ParkerDotComMain-TW",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionTW_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTW_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTW_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTW_t", "descriptionTW_t", "siteSectionTW_ss", "siteSubSectionTW_ss", "supportResourceTypeTW_ss", "supportTypeTW_ss", "ECOM_JSON_URL_s", "productTW_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTW_facet", "siteSectionTW_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleTW_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionTW_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleTW_t", "descriptionTW_t", "siteSectionTW_ss", "siteSubSectionTW_ss", "supportResourceTypeTW_ss", "supportTypeTW_ss", "ECOM_JSON_URL_s", "productTW_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionTW_facet", "siteSectionTW_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1TW_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1TW_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TW\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TW_facet}productTaxonomyL2TW_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2TW_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1TW\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2TW_facet}productTaxonomyL2TW_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2TW_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2TW_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TW_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3TW_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLTW THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTW_facetg_technologyTW_facet}technologyTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionTW_facet}siteSectionTW_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeTW_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionTW_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTW_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTW~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleTW_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionTW~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"TW\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-TW"
  }
}, {
  "id" : "ParkerDotComMainMaster_rules-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "efe423c9-3ecf-4b22-af79-0a03d5d6a1e8",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "efe423c9-3ecf-4b22-af79-0a03d5d6a1e8"
  }, {
    "type" : "search-fields",
    "id" : "80ad5b67-12a8-4776-8ef5-dc3ffc15d548",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "80ad5b67-12a8-4776-8ef5-dc3ffc15d548"
  }, {
    "type" : "facet",
    "id" : "c21c648a-409b-4509-a84b-35a055254b9e",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "c21c648a-409b-4509-a84b-35a055254b9e"
  }, {
    "type" : "solr-query",
    "id" : "d4550d2e-af8f-48f8-abf4-690680d84c9f",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "d4550d2e-af8f-48f8-abf4-690680d84c9f"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMainMaster_rules-default"
  }
}, {
  "id" : "ParkerDotComMain-DK",
  "stages" : [ {
    "type" : "set-params",
    "id" : "1v",
    "params" : [ {
      "key" : "fq",
      "value" : "audience_ss:public",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Restrict to public assets",
    "secretSourceStageId" : "1v"
  }, {
    "type" : "javascript-query",
    "id" : "5qg",
    "script" : "var p = Math.random();\nvar pipelineType;\nif (p < 0.5)\n{\n\tpipelineType = \"a\";\n\t//logger.info(\"zzz setting pipeline Type to A\");\n}\nelse\n{\n\tpipelineType = \"b\";\n\t//logger.info(\"zzz setting pipeline Type to B\");  \n}\n\nctx.set(\"abpipeline\",pipelineType);\n//logger.info(\"zzz set the ctx value as \" + pipelineType);",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Compute A/B Pipeline (JS)",
    "secretSourceStageId" : "5qg"
  }, {
    "type" : "javascript-query",
    "id" : "yq",
    "script" : "\tvar HttpURLConnection = java.net.HttpURLConnection;\n\tvar URL = java.net.URL;\n\tvar InputStreamReader = java.io.InputStreamReader;\n\tvar BufferedReader = java.io.BufferedReader;\n\tvar e = java.lang.Exception;\n\tvar url = \"\";\n    var originalQuery;\n\n\n\tvar main_q = request.getFirstParam('q');\n\tif (main_q != '*:*' && main_q != '*') {\n  \t\toriginalQuery = main_q;\n\t\t \n\t      \t\n\t\ttry {\n          \n          \t//logger.info(\"zzz query: \" + main_q);\n\t\t\t//url = new URL((\"https://corpappstest.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/GetPartNumberFromPtsId/\" + originalQuery));\n            //url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n            url = new URL((\"https://corpapps.parker.com/PTS_E/PTSRestAPI/api/PTSIDPartData/\" + originalQuery));\n\t\t\n\t\t\t//logger.info(\"zzz PTS url: \" + url);\n\t\t\t\n\t\t\tvar c = java.net.HttpURLConnection;\n\t\t\tc = url.openConnection();\n\t\t\tc.connect();\n\t\t\tvar status = c.getResponseCode();\n\t\t\t//logger.info(\"zzz *** Query Status: \" + status);\n\t\t\t\n\t\t\tif (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_MOVED_PERM) {\n\t\t\t\tvar reader = new BufferedReader(new InputStreamReader(c.getInputStream()));\n\t\t\t\tvar response = JSON.parse(reader.readLine());\n                var foundPartNum = response.partNum;\n                var foundMessage = response.message;\n\n              //logger.info(\"zzz the partNumber is: \" + foundPartNum);\n              //logger.info(\"zzz the message is: \" + foundMessage);\n              \n              if (foundMessage!=\"There is no Part Number associated with this PTSID.\"){\n              \n              \tif (foundPartNum){\n                    //logger.info(\"zzz found something!\");\n               \t    request.removeParam(\"q\");\n\t\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n                    request.addParam(\"ptsFound\",\"true\");\n              \t}\n                \n                \n                else\n                  \n                {\n                  request.addParam(\"ptsFound\",\"false\");\n                  //logger.info(\"zzz no matching part nmber found for \" + main_q);\n                }\n                  \n              }\n                \n              /*\n              if (response.partNum.equals(\"There is no Part Number associated with this PTSID.\"))\n                  {\n                  logger.info(\"zzz There is no Part Number associated with this PTSID: \" + originalQuery);\n                  }\n        \t  else if (response.equals(\"PTSID cannot be greater than 8 characters. Please enter a valid PTSID\"))\t\n              {\n                logger.info(\"zzz PTSID cannot be greater than 8 characters. Please enter a valid PTSID: \" + originalQuery);\n              }\n              \n              else\n              {\n                logger.info(\"zzz simple!\");\n                request.removeParam(\"q\");\n\t\t\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+response.partNum);\n\t\t\t\trequest.addParam(\"original_query\",originalQuery);\n            \t}\n                */\n              \n              \n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(\"zzz PTS_REST Call Error: \" + e);\n            request.addParam(\"ptsFound\",\"error\");\n\t\t}\n      }",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS:  REST Call",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "yq"
  }, {
    "type" : "sub-query",
    "id" : "fap",
    "key" : "subquery-results",
    "collection" : "ParkerPTS",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "q" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "wt",
      "value" : "json"
    }, {
      "key" : "start",
      "value" : "0"
    }, {
      "key" : "rows",
      "value" : "1"
    }, {
      "key" : "q",
      "value" : "{!dismax qf=ptsId_s v=$q}"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : true,
    "label" : "PTS: Solr Subquery for Matching Part #",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "fap"
  }, {
    "type" : "javascript-query",
    "id" : "rx",
    "script" : "var req = request.getParams();\nlogger.info(\"zzz original request:\" + req);\nvar context = ctx.getProperties();\nlogger.info(\"zzz context ctx: \"  + context);\n\nvar queryRPC = ctx.get(\"subquery-results\");\nvar numFound = queryRPC.response.numFound;\nlogger.info(\"zzzz *********Log1: \" +queryRPC);\nlogger.info(\"zzzz *********Log2: \" +queryRPC.response.numFound);\nlogger.info(\"zzzz *********Log3: \" +queryRPC.response.docs);\nlogger.info(\"zzzz *********Log3a: \" +queryRPC.response.docs[0].partNum_s);\n\nvar paramList = params.getProperties();\n\nvar query = request.getParam(\"q\").toString();\nvar originalQuery = query.substring(1,query.length()-1);\nlogger.info(\"zzz  original query: \" + originalQuery);\n\nlogger.info(\"zzz:  about to queryRPC\");\n\nif (queryRPC.response.numFound>0){\n\t\n    \n\t\tvar ptsPartNum = queryRPC.response.docs[0].partNum_s;\n\t\tlogger.info(\"zzzzzz  found PTS Matching Part #: \" + ptsPartNum);\n\t\trequest.removeParam(\"q\");\n\t\trequest.addParam(\"q\",\"parkerPartNumber_s:\"+ptsPartNum);\n\t\trequest.addParam(\"original_query\",originalQuery);\n    \n}\n",
    "type" : "javascript-query",
    "skip" : true,
    "label" : "PTS: Results Handling (JS)",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "rx"
  }, {
    "type" : "set-params",
    "id" : "ba5",
    "params" : [ {
      "key" : "fq",
      "value" : "-suggest_type_s:category",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block Suggest Category Pages",
    "secretSourceStageId" : "ba5"
  }, {
    "type" : "set-params",
    "id" : "7lr",
    "params" : [ {
      "key" : "fq",
      "value" : "-(newsEventsType_ss:Event AND -eventStart_dt:[NOW/DAY-1095DAYS TO NOW/DAY+365DAYS])",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Block OLD Events",
    "secretSourceStageId" : "7lr"
  }, {
    "type" : "javascript-query",
    "id" : "357",
    "script" : "var filters = request.getParam('fq');\nvar division = 0;\nvar country = 0 ;\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters) {\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t          if (f.match(/(parkerDivision_ss:)/)){\n             //logger.info(\"Found Division Code\");\n            division = 1;\n          }\n    \n    \t          if (f.match(/(countryId_ss:)/)){\n             //logger.info(\"Found Country Code\");\n            country = 1;\n          }\n          \n\t}\n}\n\n\nif(division){\n\tctx.setProperty(\"division\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"division\",\"no\");\n}\n\nif(country){\n\tctx.setProperty(\"country\",\"yes\");\n}\nelse\n{\n  ctx.setProperty(\"country\",\"no\");\n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Division and Country Search Type Handling (JS)",
    "secretSourceStageId" : "357"
  }, {
    "type" : "javascript-query",
    "id" : "j3s",
    "script" : "var filters = request.getParam('fq');\nvar news = 0;\nvar events = 0;\nvar mediag = 0;\n\n\n\n//logger.info(\"test\");\n\n\n\nif (filters.size != 0) { \n  \n  //logger.info(\"**** found filters ****\");\n  \n  for each(var f in filters)\n  \n  //logger.info(\"***********************Output of filters:  \" + f);\n  \n\t\t{\n          if (f.match(/(p2424563|p349856231|p-275727997|p-499108472|p290288458|p1466032|p384549431|p845387|p1588382477|p-225859847|p1649917998|p-225875223|p103219443|p1534919082|p-1961798681|p811439767|p110460219)/)){\n            // logger.info(\"Found News Facet Hash\");\n            news = 1;\n          }\n\t          if (f.match(/(p67338874|p-180314553|p173414198|p-2115034740|p2042412|p2087505205|p-1086326835|p2022267704|p888013|p50619656|p383375786|p888058|p-455199704|p-720977483|p-954924083|p-1265253555|p202347198|p2022271561)/)){\n            // logger.info(\"Found Event Facet Hash\");\n            events = 1;\n          }\n\n          \n\t}\n \n}\n\n\n\nif(news){\n\tctx.setProperty(\"subtab\", \"news\");\n}\n\nelse if(events){\n\tctx.setProperty(\"subtab\", \"events\");\n}\n\nelse if(mediag){\n\tctx.setProperty(\"subtab\", \"events\");\n}\nelse\n{\n  ctx.setProperty(\"subtab\", \"x\");\n}\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "News Events Handling (JS)",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "j3s"
  }, {
    "type" : "boosts",
    "id" : "e6j",
    "queryParam" : "q",
    "rules" : [ ],
    "type" : "boosts",
    "skip" : true,
    "secretSourceStageId" : "e6j"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.method",
      "value" : "unified",
      "policy" : "replace"
    }, {
      "key" : "hl.fl",
      "value" : "descriptionDK_t",
      "policy" : "replace"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.defaultSummary",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.preserveMulti",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.highlightMultiTerm",
      "value" : "true",
      "policy" : "replace"
    }, {
      "key" : "hl.snippets",
      "value" : "1",
      "policy" : "replace"
    }, {
      "key" : "hl.fragsize",
      "value" : "0",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.pre",
      "value" : "\\<strong>",
      "policy" : "replace"
    }, {
      "key" : "hl.tag.post",
      "value" : "\\</strong>",
      "policy" : "replace"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Hit Highlighting",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "Signals",
    "condition" : "request.getFirstParam('tab') != 'count'",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "cj5",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleDK_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionDK_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleDK_t", "descriptionDK_t", "siteSectionDK_ss", "siteSubSectionDK_ss", "supportResourceTypeDK_ss", "supportTypeDK_ss", "ECOM_JSON_URL_s", "productDK_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionDK_facet", "siteSectionDK_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "A - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "cj5"
  }, {
    "type" : "search-fields",
    "id" : "cj55",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "parkerPartNumberEDGN3",
      "boost" : 1.0
    }, {
      "field" : "parkerPartNumber_s",
      "boost" : 3.0
    }, {
      "field" : "singleUrlKeyword_s",
      "boost" : 50.0
    }, {
      "field" : "urlKeyword_exact",
      "boost" : 20.0
    }, {
      "field" : "urlKeyword_s",
      "boost" : 20.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 2.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 2.0
    }, {
      "field" : "titleDK_t",
      "boost" : 10.0
    }, {
      "field" : "descriptionDK_t",
      "boost" : 5.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    }, {
      "field" : "parkerPartCompressed",
      "boost" : 10.0
    } ],
    "returnFields" : [ "score", "audience_ss", "brand_ss", "categoryId_l", "compressedPartNumber_s", "configURL_s", "countryId_ss", "countryName_ss", "eventYear_i", "eventEnd_dt", "eventType_ss", "eventStart_dt", "eventAddress_t", "eventDisplayEnd_dt", "eventDisplayStart_dt", "fileType_ss", "hasCad_s", "hasConfig_s", "id", "imageURL_s", "isBuyable_s", "isNew_s", "isOrdReq_s", "isRegReq_s", "language_is", "languageName_ss", "market_ss", "newsDate_dt", "newsYear_i", "newsType_ss", "otAssetType_s", "otBrand_ss", "otBrandName_ss", "otCategoryName_ss", "otL1Cat_ss", "otL2Cat_ss", "otCountryCode_s", "otDefaultLang_s", "otDivDescription_s", "otDivision_ss", "otDivisionName_ss", "otEcomId_ls", "otExcludedCounty_ss", "otExcludedCountryCodes_ss", "otLangSet_ss", "otLocaleName_ss", "otMarket_ss", "otMarketsName_ss", "otName_s", "otOwner_s", "otProductName_ss", "ots_id_s", "otSubcategoryName_ss", "otTagAllPS_ss", "otTagAllPT_ss", "otTagType_ss", "otTechnology_ss", "otTechnologyName_ss", "parentId_l", "parkerDivision_ss", "parkerDivisionName_ss", "parkerId_l", "parkerPartNumber_s", "partCount_i", "priority_i", "productSeriesId_l", "technology_ss", "thumbnailURL_s", "thumbnailAltText_s", "videoId_s", "videoDownloadUrl_s", "videoThumbnailURL_s", "videoDownloadable_s", "videoThumbnailAltText_s", "urlKeyword_s", "audioId_s", "audioThumbnailURL_s", "audioThumbnailAltText_s", "documentThumbnailURL_s", "documentThumbnailAltText_s", "otF6_s", "otF6_t", "imageDownloadable_s", "imageURL_s", "ImageAltText_s", "mediaType_s", "otChannel_0_s", "otChannelName_0_s", "otContentType_s", "otContentTypeId_s", "otF3_s", "otF3_t", "siteSection_ss", "siteSubSection_ss", "supportType_ss", "supportResourceType_ss", "titleDK_t", "descriptionDK_t", "siteSectionDK_ss", "siteSubSectionDK_ss", "supportResourceTypeDK_ss", "supportTypeDK_ss", "ECOM_JSON_URL_s", "productDK_ss", "cadType_ss", "cadURL_ss", "contentSource_s", "publish_date", "author", "ot_id_s", "siteSection_facet", "siteSection_fq", "siteSectionDK_facet", "siteSectionDK_fq", "psURLKeyword_s", "isL1_s", "isL2_s", "isL3_s", "keywordGrouping_s", "type_s" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "B - Search Fields and Basic Relevancy",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "cj55"
  }, {
    "type" : "search-fields",
    "id" : "v2r",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields for counts",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "v2r"
  }, {
    "type" : "set-params",
    "id" : "tje",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "All Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'all' || request.getFirstParam('tab') == 'careers' ||  !request.hasParam('tab')",
    "secretSourceStageId" : "tje"
  }, {
    "type" : "set-params",
    "id" : "qys",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "qys"
  }, {
    "type" : "set-params",
    "id" : "v8q",
    "params" : [ {
      "key" : "facet.field",
      "value" : "productTaxonomyL1DK_facet",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Products Tab - L1 Taxonomy",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "v8q"
  }, {
    "type" : "javascript-query",
    "id" : "2f",
    "script" : "// Determines if user has selected an L1 Taxonomy to control if L2 or L3 Taxonomy show display\n//logger.info(\"********** TAXONOMY FQs *********\");\nfacetParams = request.getParam(\"fq\");\nfacetParamsLength = facetParams.length;\n\n\nfor (var i = 0; i < facetParamsLength; i++) {\n  \n  if((facetParams[i].indexOf(\"productTaxonomyL1DK_fq\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1DK\");\n //    request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2DK_facet}productTaxonomyL2DK_facet\");\n\trequest.addParam(\"facet.field\", \"productTaxonomyL2DK_facet\");\n    \n     }\n  \n  else if ((facetParams[i].indexOf(\"productTaxonomyL1_facet\") >0)){\n     \n   // logger.info(\"** found productTaxonomyL1DK\");\n//     request.addParam(\"facet.field\", \"{!ex=tag_productTaxonomyL2DK_facet}productTaxonomyL2DK_facet\");\n    request.addParam(\"facet.field\", \"productTaxonomyL2DK_facet\"); \n    \n     }\n  \n    else if ((facetParams[i].indexOf(\"productTaxonomyL2DK_fq\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3DK_facet\");\n  }\n  \n      else if ((facetParams[i].indexOf(\"productTaxonomyL2_facet\") >0)){\n\n    request.addParam(\"facet.field\", \"productTaxonomyL3DK_facet\");\n  }\n  \n  else\n  {\n   // logger.info(\"** did not find any taxonomy fields to add to request\");\n  }\n  \n}\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - L2 and L3 Taxonomy Facet Display",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') != 'new'",
    "secretSourceStageId" : "2f"
  }, {
    "type" : "javascript-query",
    "id" : "r4dfq",
    "script" : "function decode(encoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var decodedValue= Base64.decode(encoded);\n  \n  return decodedValue;\n  \n}\n\nfunction encode(decoded){\n  \n  \n  var Base64 = {\n\tdecode: function (str) {\n\t\treturn new java.lang.String(java.util.Base64.decoder.decode(str));\n\t},\n\tencode: function (str) {\n\t\treturn java.util.Base64.encoder.encodeToString(str.bytes);\n\t}\n};\n  \n  var encodedValue= Base64.encode(decoded);\n  \n  return encodedValue;\n  \n}\n\n\nfunction getPosition(string, subString, index) {\n   return string.split(subString, index).join(subString).length;\n}\n\n\n\n\n\n// **** START of QUERY PIPELINE\n\nString.prototype.replaceAt=function(index, replacement) {\n    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);\n}\n\n\n\nvar facetParams = request.getParam(\"fq\"); // pull in all fq values from request\nvar facetParamsLength = facetParams.length;  // determine length of fqs\nvar currentFacetLevel = \"0\";\nvar originalFacet = \"\"; // set up original facet field\nvar levelZeroFacet = \"\";\nvar levelOneFacet = \"\";\nvar levelTwoFacet = \"\";\nvar levelTracker;\nvar tempFacet = \"\";\nvar facetTree = [];\nvar skipTree = 0;\nvar fqCounter = 0;\nvar fqTaxFound = 0;\n\n//logger.info(\"zzzz facet params: \" + facetParams);\n//logger.info(\"zzzz number of fqs: \" + facetParamsLength);\n\nif (facetParamsLength) { // if there are facets, process them\n\tfor each (var fq in facetParams) {\n\t\tfqCounter++;\n\t\t//logger.info(\"zzz fq # \" + fqCounter);\n\t\t//logger.info(\"zzzz fq value: \" + fq);\n\t\tvar fqArray;\n  \n\t\tfqArray = fq.split(\":\");\n  \n\t\t//logger.info(\"zzz value left: \" + fqArray[0]);\n\t\t//logger.info(\"zzz value right: \" + fqArray[1]);\n  \n  \n\t\tif(fqArray[0]==\"productTaxonomy_fq\"){ // if this is a productTaxonomy fq then process it - until a user has selected a facet, this will be missing\n\t\t\t//logger.info(\"zzz ding ding ding!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\t\t\tfqTaxFound = 1; // found a productTaxonomy value\n   \n\t\t\tvar decodedValue=decode(fqArray[1]);\n\t\t\toriginalFacet = decodedValue;\n\t\t\t//logger.info(\"zzz original decoded: \" + originalFacet);\n\t\n\t\t\tcurrentFacetLevel = originalFacet.charAt(0);\n\t\t\n\t\t\t//logger.info(\"zzz current Facet Level incoming is ... \" + currentFacetLevel);\n\t\n\t\n\t\t\tswitch(currentFacetLevel){\n\t\t\n\t\t\tcase \"2\":\n\t\t\n\t\t\t\t/*\n\n\t\t\t\tIf level is 2 then this is the end of the hierarchy because user was filtering on an L2 which means nothing to be returned now\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 2 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 3;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\t// Level Two\n\t\t\t\ttempFacet = originalFacet;\n\t\t\t\tlevelTwoFacet=tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelTwoFacet: \" + levelTwoFacet);\n\t\t\t\tfacetTree[2] = levelTwoFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"3\");\n\t\t\t\n\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\t/*\n\n\t\t\t\tIf level is 1 return top two levels and calculate new prefix\n\n\n\t\t\t\t*/\n\t\t\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 1 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 2;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\t// Level One\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",3))+1).replaceAt(0,\"1\"); // extract substring up to third slash and then set facet Level  to 1\n\t\t\t\tlevelOneFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelOneFacet is: ***** \" + levelOneFacet);\n\t\t\t\tfacetTree[1] = levelOneFacet;\n\t\t\t\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"2\");\n\t\t\t\tbreak;\t\t\n\t\t\tcase \"0\":\n\t\t\n\t\t\t\t/* \n\t\t\t\tIf level is 0 return top level and calculate new prefix\n\t\t\n\t\t\t\t*/\n\t\t\n\t\t\t\t//logger.info(\"zzz Level 0 facet processing goes here ******\");\n\t\t\t\tlevelTracker = 1;\n\t\t\t\n\t\t\t\t// Level Zero\n\t\t\t\ttempFacet = originalFacet.substr(0, (getPosition(originalFacet,\"/\",2))+1).replaceAt(0,\"0\"); // extract substring up to second slash and then set facet Level to 0\n\t\t\t\tlevelZeroFacet = tempFacet+\"$$$\"+encode(tempFacet);\n\t\t\t\t//logger.info(\"zzz levelZeroFacet: \" + levelZeroFacet);\n\t\t\t\tfacetTree[0] = levelZeroFacet;\n\t\t\t\n\t\t\t\tnewPrefix = tempFacet.replaceAt(0,\"1\");\n\t\t\t\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t//logger.info(\"zzz UNKNOWN facet processing goes here ******\");\n\t\t\t}\n\t\n\t\n\t\t}\n\t\n\t\telse if(fqCounter>=facetParamsLength && fqTaxFound != 1) {\n\t\t    //logger.info(\"zzz ************** FALLDK THROUGH ... no taxonomy fq\");\n\t\t\t//logger.info(\"zzz there are FQs but no taxonomy fqs\");\n\t\t\t//logger.info(\"zzz ********* LEVEL 0\");\n\t\t\tlevelTracker = 0;\n\t\t\t//logger.info(\"zzz  initializing facet filter to 0/\");\n\t\t\tvar decodedValue=\"0/\";\n\t\t\tvar newPrefix = decodedValue;\n\t\t\tvar nextLevelNumberVal = decodedValue.charAt(0);\n\t\t\t//logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n\t\t\tvar nextLevelNumber = parseInt(nextLevelNumberVal);\n\t\t\n\t\t}\n\n  \n\n  \n\t}\n}\nelse // there are no fqs so this is an inital request, set default filtering for Level 0\n{\n  levelTracker = 0;\n  //logger.info(\"zzz ********* LEVEL 0\");\n  //logger.info(\"zzz there are no FQs\");\n  //logger.info(\"zzz  initializing facet filter to 0/\");\n  var decodedValue=\"0/\";\n  var newPrefix = decodedValue;\n  var nextLevelNumberVal = decodedValue.charAt(0);\n  //logger.info(\"zzz  next level number val: \"  + nextLevelNumberVal);\n  var nextLevelNumber = parseInt(nextLevelNumberVal);\n  skipTree=1;\n  \n}\n\n\t\n// Modify the request with the data that has been collected\n// Set up next level facet prefix and return relevany first and second level taxonomies for the UI\n\n\nrequest.addParam(\"facet\",\"true\");\nrequest.addParam(\"facet.field\",\"productTaxonomy_facet\");\n//logger.info(\"zzz setting new prefix to: \" + newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.prefix\", newPrefix);\nrequest.addParam(\"f.productTaxonomy_facet.facet.mincount\",\"1\");\n//logger.info(\"zzz ready to add Taxonomy Tree facets facet \");\nif(!skipTree){\n\tif(levelTracker==3){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t\trequest.addParam(\"facetTree\",facetTree[2]);\n\t}\n\telse if(levelTracker==2){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t\trequest.addParam(\"facetTree\",facetTree[1]);\n\t}\n\telse if(levelTracker==1){\n\t\trequest.addParam(\"facetTree\",facetTree[0]);\n\t}\n\t\n\t\n\t\n}   ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Products Tab - Handle TaxonomyFQ (JS)",
    "condition" : "request.getFirstParam('tab') == 'products' && request.getFirstParam('facetMode') == 'new'",
    "secretSourceStageId" : "r4dfq"
  }, {
    "type" : "set-params",
    "id" : "bc8",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "supportResourceTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "cadType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "productDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "languageName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "fileType_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Support Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'support' || request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "bc8"
  }, {
    "type" : "set-params",
    "id" : "12d",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News and Events Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'news-events'",
    "secretSourceStageId" : "12d"
  }, {
    "type" : "set-params",
    "id" : "ws1",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDK_facetg_technologyDK_facet}technologyDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsYear_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "News (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'news'",
    "secretSourceStageId" : "ws1"
  }, {
    "type" : "set-params",
    "id" : "kkf",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "newsEventsTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "marketDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "technologyDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "brand_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Past Events\"}eventDisplayStart_dt:([* TO NOW/DAY-1MILLI])",
      "policy" : "append"
    }, {
      "key" : "facet.query",
      "value" : "{!ex=dt key=\"Future Events\"}eventDisplayStart_dt:([NOW/DAY TO *])",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "eventYear_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Events (Only) Tab - Facet Display",
    "condition" : "ctx.getProperty('subtab') == 'events'",
    "secretSourceStageId" : "kkf"
  }, {
    "type" : "set-params",
    "id" : "3ed",
    "params" : [ {
      "key" : "facet",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSectionDK_facet}siteSectionDK_facet",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "otherTypeDK_facet",
      "policy" : "append"
    }, {
      "key" : "f.siteSectionDK_facet.facet.mincount",
      "value" : "0",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "General Tab - Facet Display",
    "condition" : "request.getFirstParam('tab') == 'general'",
    "secretSourceStageId" : "3ed"
  }, {
    "type" : "set-params",
    "id" : "ky4",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_parkerDivisionName_facet}parkerDivisionName_facet",
      "policy" : "append"
    }, {
      "key" : "facet.mincount",
      "value" : "1",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Division Search - Division Facets",
    "condition" : "ctx.getProperty('division') == 'no'  &&  request.getFirstParam('tab') != 'news-events' &&\nrequest.getFirstParam('tab') != 'careers'                                         \n",
    "secretSourceStageId" : "ky4"
  }, {
    "type" : "facet",
    "id" : "ay",
    "fieldFacets" : [ {
      "field" : "language_is",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "country_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryName_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "contentSource_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Debug Tab - Facets",
    "condition" : "request.getFirstParam('tab') == 'debug'",
    "secretSourceStageId" : "ay"
  }, {
    "type" : "set-params",
    "id" : "mmn",
    "params" : [ {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Top Level Facet Count - Fixed Facet",
    "condition" : "request.getFirstParam('tab') == 'count'",
    "secretSourceStageId" : "mmn"
  }, {
    "type" : "set-params",
    "id" : "97v",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleDK_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionDK~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "A - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'a'",
    "secretSourceStageId" : "97v"
  }, {
    "type" : "set-params",
    "id" : "97vv",
    "params" : [ {
      "key" : "bq",
      "value" : "productType_ss:Product Category^10",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:Blog^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "type_s:News^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Product Series^5",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "productType_ss:Part^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "titleDK_t~1^5",
      "policy" : "append"
    }, {
      "key" : "qs",
      "value" : "2",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "descriptionDK~2^3",
      "policy" : "append"
    }, {
      "key" : "pf",
      "value" : "body_t~3^3",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL1_s:yes^2000000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL2_s:yes^500000",
      "policy" : "append"
    }, {
      "key" : "bq",
      "value" : "isL3_s:yes^300000",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "B - Relevancy Adjustments",
    "condition" : "ctx.getString('abpipeline') == 'b'",
    "secretSourceStageId" : "97vv"
  }, {
    "type" : "set-params",
    "id" : "1vn",
    "params" : [ {
      "key" : "fq",
      "value" : "languageCode_ss:(\"DK\")",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Language Restriction",
    "secretSourceStageId" : "1vn"
  }, {
    "type" : "set-params",
    "id" : "t2",
    "params" : [ {
      "key" : "nowx",
      "value" : "2016-03-14",
      "policy" : "replace"
    }, {
      "key" : "tagsx",
      "value" : "PROD",
      "policy" : "default"
    }, {
      "key" : "tags_excludex",
      "value" : "A",
      "policy" : "append"
    }, {
      "key" : "defType",
      "value" : "edismax",
      "policy" : "default"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Rules: Set up 'tags' and 'now'",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "t2"
  }, {
    "type" : "javascript-query",
    "id" : "91",
    "script" : "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Prepare sub-query",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "91"
  }, {
    "type" : "sub-query",
    "id" : "l8j",
    "key" : "applicable_rules_data",
    "collection" : "ParkerDotComMain_rules",
    "handler" : "select",
    "method" : "GET",
    "parentParams" : [ "username", "tags_exclude", "tags", "now", "main_q", "filters" ],
    "rollupKeys" : [ ],
    "params" : [ {
      "key" : "fq",
      "value" : "-enabled:false"
    }, {
      "key" : "q",
      "value" : "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
    }, {
      "key" : "keywords_q",
      "value" : "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
    }, {
      "key" : "contains_q",
      "value" : "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
    }, {
      "key" : "text_q",
      "value" : "(+{!edismax f='search_terms' v=$main_q} +matching:text)"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
    }, {
      "key" : "fq",
      "value" : "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
    }, {
      "key" : "fq",
      "value" : "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
    }, {
      "key" : "fq",
      "value" : "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
    }, {
      "key" : "facet",
      "value" : "on"
    }, {
      "key" : "facet.sort",
      "value" : "index"
    }, {
      "key" : "facet.field",
      "value" : "{!key=drill_down_tags}tags"
    }, {
      "key" : "facet.missing",
      "value" : "true"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tags,tags_exclude}tags"
    }, {
      "key" : "debug",
      "value" : "true"
    } ],
    "headers" : [ ],
    "type" : "sub-query",
    "skip" : false,
    "label" : "Rules: Retrieve Effective",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "l8j"
  }, {
    "type" : "javascript-query",
    "id" : "dgf",
    "script" : "// add to solrconfig.xml\n// <str>elevator</str> under the last-components array of the select handler\n\n\n// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = true;  \n\n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1`\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if(use_qec){\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        }\n        else\n        {\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n          \n        break;\n\n     case 'boost_list':\n        if(use_qec){\n        \n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n          \n        }\n        else\n        {\n        \n        var orig_q = request.getFirstParam('q');\n        request.putSingleParam('orig_q',orig_q);\n        request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n        request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n        set_rules_ordered_q(rule_doc);\n        request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n\t\t}\n          \n        break;\n\n          \n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Process (Integrated)",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "dgf"
  }, {
    "type" : "set-params",
    "id" : "5bz",
    "params" : [ {
      "key" : "fq",
      "value" : "{!collapse field=keywordGrouping_s nullPolicy=expand}",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "label" : "Expand-Collapse Duplicates",
    "secretSourceStageId" : "5bz"
  }, {
    "type" : "javascript-query",
    "id" : "pl",
    "script" : "request.addParam(\"abpipelinetype\",ctx.getString(\"abpipeline\"));",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Set Pipeline Type in Request (JS)",
    "secretSourceStageId" : "pl"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest", "spell" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  }, {
    "type" : "javascript-query",
    "id" : "rik",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Rules: Augment Response",
    "condition" : "request.getFirstParam('rules') != 'off'",
    "secretSourceStageId" : "rik"
  }, {
    "type" : "javascript-query",
    "id" : "g1i",
    "script" : "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n  \n  return( list );\n}\n\nfunction doQuery(zookeeperHost,defaultCollection,q,which) {\n   \t\tvar HttpSolrClient = org.apache.solr.client.solrj.impl.HttpSolrClient;\n        var docList = [];\n\n       var QueryResponse = org.apache.solr.client.solrj.response.QueryResponse;\n         \n  \n        try {\n \n            var builder = new HttpSolrClient.Builder();\n          \tbuilder.withBaseSolrUrl(\"http://localhost:8983/solr/ParkerDotComMain\");\n            var solrServer = builder.build();\n            logger.info(\"CLOUD SERVER INIT OK...\");\n          \tif( q !== null){\n            \n           \tvar resp = solrServer.query(q);\n           \tvar suggest = resp.getResponse().get(\"suggest\");\n            \n            if( suggest && suggest.size() > 0 ){\n               var def = suggest.get(\"default\");\n              \t//docList.push(\"suggest\");\n               if( def && def.size() > 0 ){\n                \tvar term = def.get(def.getName(0));\n                 \t//docList.push(\"def\");\n                 //docList.push(term+\"\"+def.get(\"true\").get(\"suggestions\"));\n                 \tif( term && term.size() > 0 ){\n                      //docList.push(\"term\");\n                      var results = term.get(\"suggestions\");\n                      //docList.push(\"suggestions\");\n                 \t\tfor (var i = 0; results != null && i < results.size();i++) {\n            \t\t\t\tdocList.push(results.get(i).get(\"term\"));\n        \t\t\t\t}\n                      \n                     // docList.push(q.toQueryString());\n                    }\n               }\n            }\n\n        \n          }\n \n        } catch (ex) {\n            logger.error(ex.getLocalizedMessage());\n           docList.push(ex.getLocalizedMessage());\n        }\n \n        return docList;\n}\n\nfunction doSolrWork(queryStr){\n  \tvar SOLRPARAMS = org.apache.solr.common.params.MapSolrParams;\n\tvar HASHMAP = java.util.HashMap;\n\tvar SOLRQUERY = org.apache.solr.client.solrj.SolrQuery;\n\tvar q = new SOLRQUERY();\n  \n\tq.setRequestHandler(\"/suggest\");\n\tq.add(\"suggest.q\",queryStr);\n\tvar docList = doQuery(\"localhost:9983/lwfusion/3.1.3/solr\",\"ParkerDotComMain\",q,queryStr);\n  \n // logger.info(\"zzz \" + queryStr + \" # of spelling suggestions: \" + docList.length);\n\treturn( add_to_response('suggest_part_search',docList) );\n}\nvar queryStr = request.getFirstParam(\"q\");\n\nif( queryStr ){\n\n\tvar docList = doSolrWork(queryStr);\n}\n  ",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "Parts Suggestion",
    "secretSourceStageId" : "g1i"
  }, {
    "type" : "javascript-query",
    "id" : "swu",
    "script" : "var querySent = request.getParam(\"q\").toString();\n//logger.info(\"zzz querySent: \" + querySent);\nvar strippedQuerySent = querySent.substring(1,querySent.length()-1);\n//logger.info(\"zzz strippedQS: \" + strippedQuerySent);\nvar query = request.getParam(\"original_query\").toString();\n//logger.info(\"zzz original_query: \" + query);\nvar originalQuery = query.substring(1,query.length()-1);\n//logger.info(\"zzz stripped originaled: \" + originalQuery);\nrequest.removeParam(\"q\");\n//logger.info(\"zzz: should have removed Q of \" + strippedQuerySent);\nrequest.addParam(\"q\",originalQuery);\n//logger.info(\"zzz: adding back original query of \" + originalQuery);\nrequest.addParam(\"pts_query\",strippedQuerySent);\n//logger.info(\"zzz adding pts_query of: \" + strippedQuerySent);\n",
    "type" : "javascript-query",
    "skip" : false,
    "label" : "PTS: Revert Query Term",
    "condition" : "/^[a-zA-Z0-9]{8}$/.test(request.getFirstParam('q'))",
    "secretSourceStageId" : "swu"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-DK"
  }
}, {
  "id" : "ParkerDotComMainMaster_signals_aggr-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "24bc5c2f-a0d2-4be8-a893-db7635285f01",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "secretSourceStageId" : "24bc5c2f-a0d2-4be8-a893-db7635285f01"
  }, {
    "type" : "search-fields",
    "id" : "e6d7b36e-e7b5-4dd8-9ad9-b890ec7d415b",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "secretSourceStageId" : "e6d7b36e-e7b5-4dd8-9ad9-b890ec7d415b"
  }, {
    "type" : "facet",
    "id" : "2b58f9c8-b508-45e6-9a24-502186c59246",
    "fieldFacets" : [ ],
    "type" : "facet",
    "skip" : false,
    "secretSourceStageId" : "2b58f9c8-b508-45e6-9a24-502186c59246"
  }, {
    "type" : "solr-query",
    "id" : "583fc98c-d4d9-4456-8ec3-fff7023c51a4",
    "allowedRequestHandlers" : [ ],
    "httpMethod" : "POST",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "secretSourceStageId" : "583fc98c-d4d9-4456-8ec3-fff7023c51a4"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMainMaster_signals_aggr-default"
  }
}, {
  "id" : "ParkerDotComMain-default",
  "stages" : [ {
    "type" : "recommendation",
    "id" : "551e2050-5355-421c-934d-750514034ad7",
    "numRecommendations" : 10,
    "numSignals" : 100,
    "aggrType" : "*",
    "boostId" : "id",
    "boostingMethod" : "query-param",
    "boostingParam" : "bq",
    "queryParams" : [ {
      "key" : "qf",
      "value" : "query_t"
    }, {
      "key" : "pf",
      "value" : "query_t^3"
    }, {
      "key" : "pf",
      "value" : "query_t~2^7"
    }, {
      "key" : "pf",
      "value" : "query_t~0^1"
    }, {
      "key" : "mm",
      "value" : "50%"
    }, {
      "key" : "defType",
      "value" : "edismax"
    }, {
      "key" : "sort",
      "value" : "score desc, weight_d desc"
    } ],
    "rollupField" : "doc_id_s",
    "rollupWeightField" : "weight_d",
    "type" : "recommendation",
    "skip" : false,
    "label" : "recommendation",
    "secretSourceStageId" : "551e2050-5355-421c-934d-750514034ad7"
  }, {
    "type" : "search-fields",
    "id" : "5387a171-00ea-48b8-af91-06609a4656cb",
    "rows" : 10,
    "start" : 0,
    "queryFields" : [ {
      "field" : "compressedPartNumber_t",
      "boost" : 100.0
    }, {
      "field" : "parkerPartNumber_t",
      "boost" : 100.0
    }, {
      "field" : "parkerPartNumberEDGN4",
      "boost" : 4.0
    }, {
      "field" : "parkerPartNumberEDGN5",
      "boost" : 5.0
    }, {
      "field" : "parkerPartNumberEDGN6",
      "boost" : 6.0
    }, {
      "field" : "parkerPartNumberEDGN7",
      "boost" : 7.0
    }, {
      "field" : "parkerPartNumberEDGN8",
      "boost" : 8.0
    }, {
      "field" : "title_t",
      "boost" : 10.0
    }, {
      "field" : "description_t",
      "boost" : 7.0
    }, {
      "field" : "body_t",
      "boost" : 2.0
    }, {
      "field" : "_text_",
      "boost" : 1.0
    } ],
    "returnFields" : [ "*", "score" ],
    "type" : "search-fields",
    "skip" : false,
    "label" : "search-fields",
    "secretSourceStageId" : "5387a171-00ea-48b8-af91-06609a4656cb"
  }, {
    "type" : "facet",
    "id" : "542b5219-b9bc-497e-a2f7-625cf05bb657",
    "fieldFacets" : [ {
      "field" : "contentSource_s",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "languageCode_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "siteSection_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "_lw_data_source_s",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "countryId_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "customerIds_ss",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyEN_facet",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "audience_ss",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "General Facets",
    "secretSourceStageId" : "542b5219-b9bc-497e-a2f7-625cf05bb657",
    "properties" : {
      "autoCreated" : true
    }
  }, {
    "type" : "facet",
    "id" : "6qp",
    "fieldFacets" : [ {
      "field" : "productTaxonomyL2_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL3_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productTaxonomyL1_s",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "productType_s",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Product-Part Facets",
    "secretSourceStageId" : "6qp"
  }, {
    "type" : "facet",
    "id" : "xft",
    "fieldFacets" : [ {
      "field" : "supportType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "supportResourceType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    }, {
      "field" : "cadType_ss",
      "sort" : "count",
      "minCount" : 1,
      "missing" : false
    } ],
    "type" : "facet",
    "skip" : false,
    "label" : "Support Facets",
    "secretSourceStageId" : "xft"
  }, {
    "type" : "set-params",
    "id" : "xgu",
    "params" : [ {
      "key" : "hl",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "hl.fl",
      "value" : "*",
      "policy" : "append"
    }, {
      "key" : "hl.usePhraseHighlighter",
      "value" : "true",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSubSection_ss}siteSubSection_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_siteSection_ss}siteSection_ss",
      "policy" : "append"
    }, {
      "key" : "facet.field",
      "value" : "{!ex=tag_productTaxonomyL1_s}productTaxonomyL1_s",
      "policy" : "append"
    } ],
    "type" : "set-params",
    "skip" : false,
    "secretSourceStageId" : "xgu"
  }, {
    "type" : "solr-query",
    "id" : "5f4254e5-db98-4f3c-9bca-fb42798c1928",
    "allowedRequestHandlers" : [ "suggest" ],
    "httpMethod" : "GET",
    "allowFederatedSearch" : false,
    "type" : "solr-query",
    "skip" : false,
    "label" : "solr-query",
    "secretSourceStageId" : "5f4254e5-db98-4f3c-9bca-fb42798c1928"
  } ],
  "properties" : {
    "secretSourcePipelineId" : "ParkerDotComMain-default"
  }
} ]